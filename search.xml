<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springsecurity</title>
      <link href="/2022/03/11/JAVA/springsecurity/"/>
      <url>/2022/03/11/JAVA/springsecurity/</url>
      
        <content type="html"><![CDATA[<p>##springsecurity</p><p>shiro springsecurity</p><p>安全</p><p>认证 授权</p><p>功能权限、访问权限、菜单权限</p><p>也是springboot底层安全模块的默认选型</p><p>记住几个类：</p><p>WebSecurityConfigurerAdapter 自定义security策略</p><p>AuthenticationManagerBuilder：自定义认证策略</p><p>@EnableWebSecurity 开启WebSecurity模式</p><p>创建SecurityConfigurer类自己配置</p><p>并不难，可以从内存和数据库中读user pwd 和roles</p><p>springboot高版本可以使用thymeleaf-extras-springsecurity5 整合两个，这样就可以通过权限控制控制用户查看的界面了‘</p><p>shiro</p><p>身份认证、授权、事务管理、加密、web support 、run as伪造成其他用户</p><p>导入依赖shiro-spring、配置文件ShiroConfig和UserRealm</p><p> 三个核心</p><p>Subject用户</p><p>SecurityManager管理用户</p><p>Realm数据连接</p><p>可以参考官网案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser=SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">Session session =currentUser.getSession();</span><br><span class="line"></span><br><span class="line">currentUser.isAuthenticated();</span><br><span class="line"></span><br><span class="line">currentUser.getPrincipal();</span><br><span class="line"></span><br><span class="line">currentUser.hasRole(&quot;schwartz&quot;);</span><br><span class="line"></span><br><span class="line">currentUser.isPermitted(&quot;lightsaber:wield&quot;)</span><br><span class="line"></span><br><span class="line">currentUser.logout();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springbootWeb开发</title>
      <link href="/2022/03/11/JAVA/springbootWeb%E5%BC%80%E5%8F%91/"/>
      <url>/2022/03/11/JAVA/springbootWeb%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>springboot帮我们配置了什么?我们能不能进行修改?能修改哪些东西?能不能扩展?</p><p>要解决的问题:</p><ul><li>导入静态资源,html css之类的</li><li>首页</li><li>jsp?没有,要学模板引擎Thymeleaf</li><li>装配扩展SpringMVC 文件上传,JSON 视图解析器</li><li>增删改查</li><li>拦截器</li><li>国际化(安卓里面的本地化?)</li></ul><p>从WebMvc的自动配置类去找resource类然后是properties类</p><p>可以找到静态资源目录如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath:/META-INF/resources/webjars</span><br></pre></td></tr></table></figure><p>第一种拿到静态资源资源方式 </p><p>什么是webjars 有maven坐标 <em>Webjars</em>本质就是以jar包的方式引入我们的静态资源 </p><p>二是在项目目录中classpath:resources 访问静态资源</p><p>statics</p><p>public</p><p>优先级即:resources -&gt;statics默认把静态资源放这-&gt;public放公共资源</p><p>根目录&#x2F;**</p><p>首页怎么定制</p><p>在自动配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private Resource getIndexHtml(String location) &#123;</span><br><span class="line">    return this.resourceLoader.getResource(location + &quot;index.html&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final String[] SERVLET_LOCATIONS = new String[]&#123;&quot;/&quot;&#125;;</span><br></pre></td></tr></table></figure><p>正常情况下index会放在templates目录下,通过controller跳到首页</p><p>thymeleaf模板引擎</p><p>通过模板渲染成html</p><p>thymeleaf常用命名空间，需要的兄弟请自取，顺便顶下我，让跟多的朋友看到：<br>xmlns:th&#x3D;<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>xmlns:sec&#x3D;<a href="http://www.thymeleaf.org/extras/spring-security">http://www.thymeleaf.org/extras/spring-security</a><br>xmlns:shiro&#x3D;<a href="http://www.pollix.at/thymeleaf/shiro">http://www.pollix.at/thymeleaf/shiro</a></p><p>html lang&#x3D;en xmlns:th&#x3D;<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>                xmlns:sec&#x3D;<a href="http://www.thymeleaf.org/extras/spring-security">http://www.thymeleaf.org/extras/spring-security</a><br>                xmlns:shiro&#x3D;<a href="http://www.pollix.at/thymeleaf/shiro">http://www.pollix.at/thymeleaf/shiro</a></p><p>thymeleaf语法</p><ul><li>Simple expressions:</li><li><strong>变量表达式：<code>$&#123;...&#125;</code></strong><ul><li>选择变量表达式：<code>*&#123;...&#125;</code></li><li>讯息表达：<code>#&#123;...&#125;</code></li><li><strong>链接 URL 表达式：<code>@&#123;...&#125;</code></strong></li><li>片段表达式：<code>~&#123;...&#125;</code></li></ul></li><li>Literals</li><li>LiteralsLiterals：<code>&#39;one text&#39;</code>，<code>&#39;Another one!&#39;</code>，…<ul><li>数字 Literals：<code>0</code>，<code>34</code>，<code>3.0</code>，<code>12.3</code>，…</li><li>布尔 Literals：<code>true</code>，<code>false</code></li><li>空 Literals：<code>null</code></li><li>Literals 标记：<code>one</code>，<code>sometext</code>，<code>main</code>，…</li></ul></li><li>Text operations:</li><li>字符串串联：<code>+</code><ul><li>Literals 替换：<code>|The name is $&#123;name&#125;|</code></li></ul></li><li>Arithmetic operations:</li><li>二进制运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code><ul><li>减号(一元运算符)：<code>-</code></li></ul></li><li>Boolean operations:</li><li>二进制运算符：<code>and</code>，<code>or</code><ul><li>布尔取反(一元运算符)：<code>!</code>，<code>not</code></li></ul></li><li>比较和equal：</li><li>比较器：<code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>(<code>gt</code>，<code>lt</code>，<code>ge</code>，<code>le</code>)<ul><li>等于运算符：<code>==</code>，<code>!=</code>(<code>eq</code>，<code>ne</code>)</li></ul></li><li>Conditional operators:</li><li>如果-则：<code>(if) ? (then)</code><ul><li>如果-则-其他：<code>(if) ? (then) : (else)</code></li><li>默认值：<code>(value) ?: (defaultvalue)</code></li></ul></li><li>Special tokens:</li><li>无操作：<code>_</code></li></ul><p>所有这些功能都可以组合和嵌套：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;User is of type &#x27;</span> + (<span class="variable">$&#123;</span>user.isAdmin()&#125; ? <span class="string">&#x27;Administrator&#x27;</span> : (<span class="variable">$&#123;</span>user.type&#125; <span class="string">?:</span> <span class="string">&#x27;Unknown&#x27;</span>))</span><br></pre></td></tr></table></figure><p>不过thymeleaf这个改起来还是挺麻烦的,太多要改的了</p><p>装配扩展SpringMVC 文件上传,JSON 视图解析器</p><p>学习方式,通过源码探究,得出结论,这个结论才是属于自己的.</p><p>springboot在组东配置很多组件的时候会先看容器中有没有用户自己配置的,没有就默认</p><p>当然,如视图解析器有多种,也会将用户配置的和自己默认的组合起来,选择最好的</p><p>在springboot中有非常多的xxxConfiguration帮助我们进行扩展配置,只要看见这个,就要注意了,这个会改变自动配置了,要关注一下改了什么功能.</p><p>CRUD</p><p>首页配置:</p><p>自定义MvcConfig</p><p>注意,所有的静态资源都需要使用thymeleaf接管 </p><p>url:@{}</p><p>国际化</p><p>在resource目录下创建i18n文件</p><p>创建XXX.properties和XXX_zh_CN.properties,然后配置</p><p>然后自定义一个LocaleResolver组件</p><p>最后记得将自己的组件用@Bean配到写的MvcConfig里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义国际化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLocalResolver</span> <span class="keyword">implements</span> <span class="title class_">LocaleResolver</span> &#123;</span><br><span class="line">    <span class="comment">//国际化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Locale <span class="title function_">resolveLocale</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家，地区</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Locale</span>(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> locale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocale</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Locale locale)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//扩展springMVC配置 dispatchservlet  springboot 自动装配 这也是官方建议的 以后也会有很多扩展</span><br><span class="line">//注意不能就@EnableWebMvc这个失效了 会有个@ConditionalOnMissingBean()判断</span><br><span class="line">@Configuration</span><br><span class="line">public class MyMvcConfig implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);//这个就是重定向</span><br><span class="line">        registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;index&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //自定义的国际化</span><br><span class="line">    @Bean</span><br><span class="line">    public LocaleResolver localeResolver()&#123;</span><br><span class="line">        return new MyLocalResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*    //ViewResolver 实现了视图解析器接口的类，我们就可以把它看做试图解析器</span><br><span class="line">    @Bean</span><br><span class="line">    public ViewResolver myViewResolver()&#123;</span><br><span class="line">        return new MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //例如自定义一个自己的试图解析器</span><br><span class="line">    public static class MyViewResolver implements ViewResolver&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public View resolveViewName(String s, Locale locale) throws Exception &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>message:#{}</p><p>登陆和拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/user/login&quot;)</span><br><span class="line">    public String login(</span><br><span class="line">            @RequestParam(&quot;username&quot;) String username,</span><br><span class="line">            @RequestParam(&quot;password&quot;) String password,</span><br><span class="line">            Model model,HttpSession session)&#123;</span><br><span class="line">        //具体的业务</span><br><span class="line"></span><br><span class="line">        if(!StringUtils.isEmpty(username) &amp;&amp; &quot;123456&quot;.equals(password))&#123;</span><br><span class="line">            session.setAttribute(&quot;loginUser&quot;,username);</span><br><span class="line">            return &quot;redirect:/main.html&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //告诉用户你登陆失败了</span><br><span class="line">            model.addAttribute(&quot;msg&quot;,&quot;用户名或密码错误&quot;);</span><br><span class="line">            return &quot;index&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class LoginHandlerIntercepter implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        //登陆成功后，应该有用户的sessiion；</span><br><span class="line">        Object loginUser=request.getSession().getAttribute(&quot;loginUser&quot;);</span><br><span class="line">        if(loginUser==null) &#123;</span><br><span class="line">            //没登录</span><br><span class="line">            request.setAttribute(&quot;msg&quot;, &quot;没有权限，请先登陆&quot;);</span><br><span class="line">            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request, response);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在mvcconfig中添加自定义登陆拦截器</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">    //注意开放静态资源的</span><br><span class="line">    registry.addInterceptor(new LoginHandlerIntercepter())</span><br><span class="line">            .addPathPatterns(&quot;/**&quot;).excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;,&quot;/css/*&quot;,&quot;/js/**&quot;,&quot;/img/**&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CRUD</p><p>1、登陆列表页面</p><p>​    提取公共页面</p><p>​        1、<code>th:fragment=&quot;sidebar&quot;</code></p><p>​        2、<code>&lt;div th:replace=&quot;~&#123;commons/commons::sidebar(active=&#39;list.html&#39;)&#125;&quot;&gt;&lt;/div&gt;</code></p><p>​        3、如果要传递参数，用()传参</p><p>2、查询</p><p>​    列表循环展示</p><p>3、添加</p><p>按钮提交</p><p>跳转到添加页面</p><p>添加员工成功，返回首页</p><p>主要提交表单时，若提交的是对象的某个属性，要注意name的写法</p><p>因为前端是无法提交一个对象的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label&gt;department&lt;/label&gt;</span><br><span class="line">    &lt;select class=&quot;form-control&quot; name=&quot;department.id&quot;&gt;</span><br><span class="line">        &lt;!--这里提交的其实是id，后台是根据id来设置部门的--&gt;</span><br><span class="line">        &lt;option th:each=&quot;dept:$&#123;departments&#125;&quot; th:text=&quot;$&#123;dept.getDepartmentName()&#125;&quot; th:value=&quot;$&#123;dept.getId()&#125;&quot;&gt;&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>restful风格</p><p>Restful就是一个资源定位、资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>资源：互联网所有的事物都可以被抽象为资源<br>资源操作：分为POST、DELETE、PUT、GET四种方法，使用不同方法对资源进行操作（增、删、改、查）<br><img src="https://img-blog.csdnimg.cn/2021031117154877.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjU5NDc5Ng==,size_16,color_FFFFFF,t_70" alt="img"></p><p>三、传统风格与RestFul风格对比</p><ol><li>传统方式操作资源<br>通过不同的参数来实现不同的效果！方法单一！</li></ol><p><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> （查询,GET）<br><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> （新增,POST）<br><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> （更新,POST）<br><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> （删除,GET或POST）</p><ol start="2"><li>RestFul方式操作资源<br>可以通过不同的请求方式来实现不同的效果！<br>如下：请求地址一样，但是功能可以不同！</li></ol><p><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> （查询,GET）<br><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> （新增,POST）<br><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> （更新,PUT）<br><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> （删除,DELETE）</p><p>创建RestFulController类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class RestFulController &#123;</span><br><span class="line">    //映射访问路径</span><br><span class="line">    @RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class="line">    //在SpringMVC中可以使用 @PathVariable，让方法参数的值对应绑定到一个URI模板变量上</span><br><span class="line">    public ModelAndView index(@PathVariable int p1, @PathVariable int p2, ModelAndView mv)&#123;</span><br><span class="line">        int result = p1 + p2;</span><br><span class="line">        //实例化一个ModelAndView对象用于向视图中传值</span><br><span class="line">        mv.addObject(&quot;msg&quot;,&quot;结果：&quot; + result);</span><br><span class="line">        //返回视图</span><br><span class="line">        mv.setViewName(&quot;test&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于约束请求的类型，可以收窄请求范围。<br>指定请求谓词的类型如：GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>代码展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class EmployeeController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    EmployeeDao employeeDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/emps&quot;)</span><br><span class="line">    public String list(Model model)&#123;</span><br><span class="line">        Collection&lt;Employee&gt; employees=employeeDao.getAll();</span><br><span class="line">        model.addAttribute(&quot;emps&quot;,employees);</span><br><span class="line">        return &quot;emp/list&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/emp&quot;)</span><br><span class="line">    public String toAddpage(Model model)&#123;</span><br><span class="line">        //查出所有部门的信息</span><br><span class="line">        Collection&lt;Department&gt; departments=departmentDao.getDepartments();</span><br><span class="line">        model.addAttribute(&quot;departments&quot;,departments);</span><br><span class="line">        return &quot;emp/add&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/emp&quot;)</span><br><span class="line">    public String addEmp(Employee employee) &#123;</span><br><span class="line">        employeeDao.save(employee);</span><br><span class="line">        //查出所有部门的信息</span><br><span class="line">        return &quot;redirect:/emps&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的地址栏请求默认都会是<strong>GET</strong>类型的。</p><p>@GetMapping：扮演的是@RequestMapping(method &#x3D;RequestMethod.GET) 的快捷方式。<br>@PostMapping<br>@PutMapping<br>@DeleteMapping<br>@PatchMapping</p><p>RESTful一般是指这种格式：</p><p>（1）使用HTTP POST(或GET)进行数据交互</p><p>（2）请求数据和应答数据均为JSON格式（或XML</p><p>前端：在发送请求时，把请求转成JSON字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type:&quot;POST&quot;,    /*请求类型-POST/GET*/</span><br><span class="line">url:&quot;AddStudent?mode=admin&amp;token=12930289&quot;,   /*服务URI，用相对地址*/</span><br><span class="line">data:jsonStr,          /*附加请求参数*/</span><br><span class="line">dataType:&quot;json&quot;,   /*期望服务器返回的数据类型*/</span><br><span class="line">success: function(resp)  /*已经将服务器返回的数据转成JS 对象*/</span><br><span class="line">&#123;</span><br><span class="line">if(resp.error==0)</span><br><span class="line">alert(&quot;提交成功&quot;);</span><br><span class="line">else</span><br><span class="line">alert(&quot;出错：&quot;+resp.reason);</span><br><span class="line">&#125;,</span><br><span class="line">error: function(jqXHR, textstatus, errorThrown)</span><br><span class="line">&#123;</span><br><span class="line">alert(&quot;错误：&quot; +jqXHR.status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后端：手工读取请求数据，转成JSONObject，然后再做处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//读取请求数据，转化为字符串</span><br><span class="line">String reqText = readAsText(request.getInputStream(), &quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">//转化为json</span><br><span class="line">JSONObject jreq = new JSONObject(reqText);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写网站</p><p>1、前端搞定：页面长什么样子，需要什么数据</p><p>2、设计数据库 （数据库设计难点）</p><p>3、前端让他能够自动运行，独立化工程</p><p>4、数据接口如何对接：json ，对象 all in one</p><p>5、前后端联调测试！</p><p>1、要有一个自己熟悉的后台模板：工作需要</p><p>2、前端界面：至少要能通过前端框架，组合起来一个网站页面</p><p>3、让这个网站能够独立运行！</p><p>下一阶段</p><p><strong>JDBC</strong></p><p><strong>Mybatis</strong></p><p><strong>Druid</strong></p><p><strong>Shiro 安全</strong></p><p><strong>Spring security 安全</strong></p><p>异步任务~，邮件发送，（两个注解）定时任务（切面）</p><p>Swagger 前后端交接文档</p><p>Dubbo+Zookeeper </p><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>Spring Data</p><p>Druid是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和SQL解析器组成。该项目主要是为了扩展JDBC的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计SQL信息、SQL性能收集、SQL注入检查、SQL翻译等</p><p>感兴趣自己翻包看源码</p><p>Hikari速度最开快，Druid可以有日志</p><p>application.yml</p><p>新版druid数据源驱动的SQL监控如果用以前的老版本配置是无法监控到SQL的：</p><p>application.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        druid:</span><br><span class="line">            filters:</span><br><span class="line">                - stat</span><br><span class="line">                - wall</span><br><span class="line">                - log4j</span><br></pre></td></tr></table></figure><p>启动应用之后访问druid监控页面，除了SQL相关的页面都正常工作，但是访问SQL监控页面时没有看到SQL记录。<br>查看监控页面 数据源 菜单发现 filter类名 显示的是空，估计是filter配置有问题导致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: 12345</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    url: jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span><br><span class="line">    druid:</span><br><span class="line">      initial-size: 5</span><br><span class="line">      min-idle: 5</span><br><span class="line">      max-active: 20</span><br><span class="line">      max-wait: 5000</span><br><span class="line">      # 状态监控</span><br><span class="line">      filter:</span><br><span class="line">        wall:</span><br><span class="line">        log4j:</span><br><span class="line">        stat:</span><br><span class="line">        enabled: true</span><br><span class="line">        db-type: mysql</span><br><span class="line">        log-slow-sql: true</span><br><span class="line">        slow-sql-millis: 2000</span><br><span class="line">      # 监控过滤器</span><br><span class="line">      web-stat-filter:</span><br><span class="line">        enabled: true</span><br><span class="line">        exclusions:</span><br><span class="line">          - &quot;*.js&quot;</span><br><span class="line">          - &quot;*.gif&quot;</span><br><span class="line">          - &quot;*.jpg&quot;</span><br><span class="line">          - &quot;*.png&quot;</span><br><span class="line">          - &quot;*.css&quot;</span><br><span class="line">          - &quot;*.ico&quot;</span><br><span class="line">          - &quot;/druid/*&quot;</span><br><span class="line">      # druid 监控页面</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        enabled: true</span><br><span class="line">        url-pattern: /druid/*</span><br><span class="line">        reset-enable: false</span><br><span class="line">        login-username: admin</span><br><span class="line">        login-password: 12345</span><br></pre></td></tr></table></figure><p>Mybatis配置</p><p>mybatis-spring-boot-starter</p><p>1、导入包</p><p>2、配置文件</p><p>3、mybatis配置</p><p>4、编写sql</p><p>5、service层调dao层</p><p>6、controller调service层</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring自动配置</title>
      <link href="/2022/03/11/JAVA/springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/11/JAVA/springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="spring自动配置"><a href="#spring自动配置" class="headerlink" title="spring自动配置"></a>spring自动配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootConfiguration ：spirngboot配置</span><br><span class="line">@Configuration spring配置</span><br><span class="line">@Component 说明这也是一个spring组件</span><br><span class="line">@EnableAutoConfiguration：自动配置</span><br><span class="line">@AutoConfigurationPackage 自动配置包</span><br><span class="line">@Import(&#123;Registrar.class&#125;) 自动配置包导入 核心</span><br><span class="line">    @Import(&#123;AutoConfigurationImportSelector.class&#125;) 自动配置导入选择</span><br><span class="line"></span><br><span class="line">@ComponentScan：扫描当前主启动类同级的包</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class="line">      List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(), this.getBeanClassLoader());</span><br><span class="line">      Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class="line">      return configurations;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">    return EnableAutoConfiguration.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动配置包 spring-boot-autoconfiguration 包下的META-INF&#x2F;spring.factory自动配置的核心文件  获取项目和系统资源的目标</p><p>所有的资源都加载到配置类</p><p>自动配置经过核心注解@ConditionalOnXXX:判断是否满足条件才会在对应的start起作用</p><p>结论：springnoot的所有自动配置都是子啊启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面,但不一定生效,要判断条件是否成立,只要导入了对应的start,就有对应的启动器了,有了启动器,我们自动装配就会生效,然后就配置成功了. </p><p>1.springboot在启动的时候,从类路径下 <code>/META-INF/spring.factories</code> 获取指定的值;</p><p>2.将这些自动配置的类导入容器,自动配置就会生效,帮我们进行自动配置</p><p>3.以前我们需要自动配置的东西,现在springboot帮我们做了,在学spring和mvc的时候注入一个类要配置bean</p><p>4.整合了javaEE,解决方案和自动配置的东西都在spring-boot-autoconfigure包下</p><p>5.你配置过就会触发条件适配器,创建对应的bean,注入到容器中,</p><p>它会把所有需要导入的组件,以类名的方式返回,这些组件就会被添加到容器中;</p><p>6.容器中也会有非常多的XXAutoConfiguration文件(@Bean),就是这些类给容器中导入了这个场景需要的所有组件</p><p>并自动配置,@Configuration,JavaConfig!</p><p>7.有了自动配置类,我们就免去了手动编写配置文件的工作</p><p>JavaConfig  @Configuraion @Bean</p><p>Docker: 进程</p><p>关于SpringBoot ,谈谈你的理解</p><p>自动装配</p><p>run() 判断项目\ 推断主类\ 监听器-获取上下文处理bean </p><p>springcloud 全面接管SpringMVC的配置!实操</p><h2 id="springboot启动"><a href="#springboot启动" class="headerlink" title="springboot启动"></a>springboot启动</h2><p>底层依旧采用factoriesInstances</p><p>根据工厂类反射得到工厂的class对象,构造方法,生产工厂类实例,并返回</p><p>springboot配置文件yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用de<span class="doctag">bug:</span> true可以看哪些在自动配置类的生效了,导入依赖</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#springboot的多环境配置： 可以选择激活哪一个配置文件 ,分开写yaml会清晰点感觉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name:</span> <span class="string">springboot-01</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以存对象</span></span><br><span class="line"><span class="comment">#student:</span></span><br><span class="line"><span class="comment">#  naem: qinjiang</span></span><br><span class="line"><span class="comment">#  age: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##行内写法对象</span></span><br><span class="line"><span class="comment">#student: &#123;name: qinjiang,age: 3&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##数组</span></span><br><span class="line"><span class="comment">#pets:</span></span><br><span class="line"><span class="comment">#  - cat</span></span><br><span class="line"><span class="comment">#  - dog</span></span><br><span class="line"><span class="comment">#  - pig</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##行内写法</span></span><br><span class="line"><span class="comment">#pets: [cat,dog,pig]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#properties只能存键值对，yaml对空格的要求十分高  强大之处可以直接给实体类赋值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">qinjiang$&#123;random.uuid&#125;</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2021</span><span class="string">/8/20</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">hello:</span> <span class="string">hhhh</span></span><br><span class="line">  <span class="attr">lists:</span> [<span class="string">code</span>,<span class="string">music</span>,<span class="string">girl</span>]</span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hello:hello&#125;_旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;person.hello:hello&#125; 占位符，这样回去前面person。hello的值而不取后面的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yaml</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">收到</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-test.yaml</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#配置文件与spring.factories之间的联系</span><br><span class="line">#在XXXAytoConfiguration：有默认值</span><br><span class="line">#配置文件和XXXProperties类绑定，我们就可以使用自定义的配置了</span><br></pre></td></tr></table></figure><p>通俗理解就是扫描注解类,加载.properties文件&#x2F;yaml文件,获取默认值</p><p>把原先需要在组件bean中手打的属性{property}封装成一个类,</p><p>然后通过yaml文件进行自动注入,且我们可以在application.yaml文件中自定义这些property属性</p><p>自动装配的原理即:</p><p>精髓:</p><p>1.springboot启动会加载大量的自动配置类</p><p>2.我们看我们需要的功能有没有子啊SpringBoot默认写好的自动配置类当中</p><p>3.我们再看看自动配置类中到底配置了哪些组件,有的话就不用手动配置了</p><p>4.给容器中自动配置类添加组件的时候,会从properties类中获取某些属性.我们只需要在文件中指定这些属性的值即可:</p><p>xxxAutoConfiguration:自动配置类;给容器中添加组件</p><p>xxxProperties:封装配置文件中相关属性;</p><p>注:可以用debug&#x3D;true查看判断自动配置类生效的有哪些</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建vue项目</title>
      <link href="/2022/03/11/%E5%89%8D%E7%AB%AF/%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/03/11/%E5%89%8D%E7%AB%AF/%E6%90%AD%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="二、搭建vue项目"><a href="#二、搭建vue项目" class="headerlink" title="二、搭建vue项目"></a>二、搭建vue项目</h2><p>1、全局安装 vue cli，vue cli 是一个脚手架工具，用于生成一个基础的vue应用。<br>运行:<code>npm install vue-cli -g</code></p><p><img src="https://img-blog.csdnimg.cn/20191230134153452.png" alt="在这里插入图片描述"></p><p>2、Hbuilder新建vue项目</p><p><img src="https://img-blog.csdnimg.cn/20191230135641376.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTEyODIy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.进入项目所在文件夹，安装vue项目所需要的依赖包</p><p><img src="https://img-blog.csdnimg.cn/20191230142744474.png" alt="在这里插入图片描述"></p><p>运行：npm run dev或者cnpm run dev将项目跑起来，发现报错，这是因为在package.json中丢失了dev。这个时候只需通过”vue init webpack -g” 把丢失的dev下载过来，若遇下载缓慢，则执行cpnm install –save-dev webpack</p><p><img src="https://img-blog.csdnimg.cn/20191230142106330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTEyODIy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191230143058547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTEyODIy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>三、vue项目目录</p><p>1、build：构建脚本目录<br>1）build.js &#x3D;&#x3D;&gt; 生产环境构建脚本；<br>2）check-versions.js &#x3D;&#x3D;&gt; 检查npm，node.js版本；<br>3）utils.js &#x3D;&#x3D;&gt; 构建相关工具方法；<br>4）vue-loader.conf.js &#x3D;&#x3D;&gt; 配置了css加载器以及编译css之后自动添加 前缀；<br>5）webpack.base.conf.js &#x3D;&#x3D;&gt; webpack基本配置；<br>6）webpack.dev.conf.js &#x3D;&#x3D;&gt; webpack开发环境配置；<br>7）webpack.prod.conf.js &#x3D;&#x3D;&gt; webpack生产环境配置；<br>2、config：项目配置<br>1）dev.env.js &#x3D;&#x3D;&gt; 开发环境变量；<br>2）index.js &#x3D;&#x3D;&gt; 项目配置文件；<br>3）prod.env.js &#x3D;&#x3D;&gt; 生产环境变量；<br>3、node_modules：npm 加载的项目依赖模块<br>4、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：<br>1）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；<br>2）components：组件目录，我们写的组件就放在这个目录里面；<br>3）router：前端路由，我们需要配置的路由路径写在index.js里面；<br>4）App.vue：根组件；<br>5）main.js：入口js文件；<br>5、static：静态资源目录，如图片、字体等。不会被webpack构建<br>6、index.html：首页入口文件，可以添加一些 meta 信息等<br>7、package.json：npm包配置文件，定义了项目的npm脚本，依赖包等信息<br>8、README.md：项目的说明文档，markdown 格式<br>9、.xxxx文件：这些是一些配置文件，包括语法配置，git配置等</p><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式，相当于是一个仓库，存放公共数据的，任何组件都可以使用存放在仓库里面的数据</li></ul><p>.vuex由五大部分组成</p><p>state：定义数据，使用方法是通过：this.$store.state.xxx(方法名)<br>actions：可以包含异步操作，使用方法是通过：<br>this.$store.dispatch.xxx(方法名)<br>mutations：唯一可以修改state数据的场所，使用方法是通过：this.$store.commit.xxx(方法名)<br>getters：类似于vue组件中的计算属性，对state数据进行计算（会被缓存），使用方法是：this.$store.getters.xxx(方法名)<br>modules:模块化管理store（仓库），每个模块拥有自己的 state、mutation、action、getter<br>2.下面说下封装vuex的核心</p><p>第一步：在src文件夹下面创建store的文件夹，然后在这个文件夹下面创建四个js文件<br>state:定义公共数据<br>actions：操作异步的数据<br>mutations：操作同步的数据，也是唯一一个可以直接改变state里面定义的数据<br>getters：类似于vue组件中的计算属性，对state数据进行计算（会被缓存）<br>index:把前面封装好的文件都引入到这个文件里面，然后抛出</p><p>下面说下封装vuex的好处和具体的思路</p><p>我们在用vue脚手架3.0创建项目的时候，他会自动帮我们在src这个文件夹下面生成一个store文件夹，下面有一个index.js这个文件，index.js这个文件里面有5个属性，就是我们用vuex的时候，所用到的5个属性，把这5个属性放在同一个文件里面，适合开发中小型项目的时候使用，因为需要公用的数据不多，写在一个文件里面就可以，但是开发一个中大型项目的话，我们需要在vuex里面定义的数据比较多，所以我们就把需要的5个属性拆分出来，拆分成单独的文件，这样能在以后项目的维护，或者修改的时候比较方便，每个文件定义不同的数据，下面我们来分析一下</p><p>state：可以把项目中需要定义在state里面的数据，都定义在这个文件里面<br>action：他是一个异步的操作，把项目中异步的请求全部放在这个文件里面，如果要修改state里面定义的数据，必须要通过commit来调用mutations里面的方法，才能修改state里面的数据，不能直接修改，在组件里面需要action里面的数据，可以通过tthis.$store.dispatch+需要调用的方法名来获取<br>mutations：他是一个同步的操作，也是唯一一个可以直接修改state里面定义的数据，可以把项目中同步的数据放在这个文件里面，在组件中需要通过this.$store.commit+需要调用的方法名来获取<br>getters：计算属性，可以把项目中需要计算的数据放在这个文件里面，统一管理，在组建中通过this.$store.getters+调用的方法名可以获取到数据</p><h1 id="按需引入我们需要的框架，（移动端：vant-ui）（后台管理：element-ui）"><a href="#按需引入我们需要的框架，（移动端：vant-ui）（后台管理：element-ui）" class="headerlink" title="按需引入我们需要的框架，（移动端：vant-ui）（后台管理：element-ui）"></a>按需引入我们需要的框架，（移动端：vant-ui）（后台管理：element-ui）</h1><p><strong>-vant-ui：移动端</strong></p><p>安装指令</p><blockquote><p>npm i babel-plugin-import -D</p></blockquote><p>在babel.config.js 设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span><br><span class="line">const plugins = [</span><br><span class="line">  [</span><br><span class="line">    &#x27;import&#x27;,</span><br><span class="line">    &#123;</span><br><span class="line">      libraryName: &#x27;vant&#x27;,</span><br><span class="line">      libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;vant&#x27;</span><br><span class="line">  ]</span><br><span class="line">]</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [[&#x27;@vue/cli-plugin-babel/preset&#x27;, &#123; useBuiltIns: &#x27;usage&#x27;, corejs: 3 &#125;]],</span><br><span class="line">  plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在src文件夹下面创建一个plugins文件夹，然后下面创建一个index.js文件，里面统一管理我们需要用的组件</li></ul><p>&#x2F;&#x2F; 按需全局引入 vant组件<br>import Vue from ‘vue’<br>import { Button, List, Cell, Tabbar, TabbarItem } from ‘vant’<br>Vue.use(Button)<br>Vue.use(Cell)<br>Vue.use(List)<br>Vue.use(Tabbar).use(TabbarItem)</p><p>路由封装<br>前言：大家都知道，我们在搭建好项目以后，src文件夹下面会生成一个router这个文件夹，然后下面有一个index.js这个文件，这个里面就是我们做项目需要放路由的地方，如果我们的项目比较大，跳转的页面比较多的话，把全部的路由都放在这一个文件里面，后期优化不好优化，在做项目的时候需要找路由的时候也不好找，或者说在后期我们需要改路由的时候也不好改，所以我们就选择路由封装是最好不过的啦。。。注意：如果项目比较小，跳转的页面不是很多的情况下，就没必要封装路由</p><p>下面说下路由封装的思路，这个很简单，大家一看就会</p><p>我一般在做项目时候，遇到跳转页面多的时候呢，我会把路由分成几个文件来封装，比如现在我做的这个后台管理系统，有10个页面，每个页面里面肯定有很多需要跳转的页面，这时候我会在router这个文件夹下面创建10个文件，然后每个文件对应一个页面，比如现在首页的这个页面，就在router这个文件夹下面创建一个home.js文件，然后把首页需要跳转的的路由全部写在这个文件里面，然后把他引入到index.js这个文件里面就可以啦，这样呢，在做项目，或者以后优化的时候就比较好找，如果以后我们要优化项目，需要优化首页的时候，在我们需要优化首页这个页面路由的时候，我们就可以去home.js这个文件里面去找就可以啦</p><ul><li>然后在main.js全局文件里面引入，抛出，在全局就可以用啦</li><li>import ‘.&#x2F;plugins&#x2F;vant.js’</li></ul><p>8.封装组件<br>前言：大家都知道，vue项目都是单页面，都是组件拼接起来的，如果说我们在做中大型项目的时候，页面比较多，如果我们把这些页面都写在一个文件里面，就比较麻烦，修改的时候、找的时候、或者在优化项目的时候找起来比较麻烦，所以我们就把页面分成一个一个的组件，封装起来，然后引入到渲染的页面，这样的话，在我们写项目、修改。以后优化项目的时候，就比较方便</p><p>封装组件的话分为两种</p><p>一个是页面组件的封装<br>一个是公共组件的封装</p><h1 id="代码优化：节流防抖，函数防抖，图片懒加载，keep-alive缓存不活动的组件"><a href="#代码优化：节流防抖，函数防抖，图片懒加载，keep-alive缓存不活动的组件" class="headerlink" title="代码优化：节流防抖，函数防抖，图片懒加载，keep-alive缓存不活动的组件"></a>代码优化：节流防抖，函数防抖，图片懒加载，keep-alive缓存不活动的组件</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2022/03/11/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/03/11/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>这题是笔试的时候碰到的，思路没有理清，语法太差</p><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。</p><h3 id="map解法"><a href="#map解法" class="headerlink" title="map解法"></a>map解法</h3><p>map和字符串处理语法.charAt()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Integer&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> map.get(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; value &lt; map.get(s.charAt(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                ans -= value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-case解法"><a href="#switch-case解法" class="headerlink" title="switch case解法"></a>switch case解法</h3><p>用到了.replace() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int romanToInt(String s) &#123;</span><br><span class="line">        s = s.replace(&quot;IV&quot;,&quot;a&quot;);</span><br><span class="line">        s = s.replace(&quot;IX&quot;,&quot;b&quot;);</span><br><span class="line">        s = s.replace(&quot;XL&quot;,&quot;c&quot;);</span><br><span class="line">        s = s.replace(&quot;XC&quot;,&quot;d&quot;);</span><br><span class="line">        s = s.replace(&quot;CD&quot;,&quot;e&quot;);</span><br><span class="line">        s = s.replace(&quot;CM&quot;,&quot;f&quot;);</span><br><span class="line">        </span><br><span class="line">        int result = 0;</span><br><span class="line">        for (int i=0; i&lt;s.length(); i++) &#123;</span><br><span class="line">            result += which(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int which(char ch) &#123;</span><br><span class="line">        switch(ch) &#123;</span><br><span class="line">            case &#x27;I&#x27;: return 1;</span><br><span class="line">            case &#x27;V&#x27;: return 5;</span><br><span class="line">            case &#x27;X&#x27;: return 10;</span><br><span class="line">            case &#x27;L&#x27;: return 50;</span><br><span class="line">            case &#x27;C&#x27;: return 100;</span><br><span class="line">            case &#x27;D&#x27;: return 500;</span><br><span class="line">            case &#x27;M&#x27;: return 1000;</span><br><span class="line">            case &#x27;a&#x27;: return 4;</span><br><span class="line">            case &#x27;b&#x27;: return 9;</span><br><span class="line">            case &#x27;c&#x27;: return 40;</span><br><span class="line">            case &#x27;d&#x27;: return 90;</span><br><span class="line">            case &#x27;e&#x27;: return 400;</span><br><span class="line">            case &#x27;f&#x27;: return 900;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful接口设计规范总结</title>
      <link href="/2022/03/10/JAVA/restful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/10/JAVA/restful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="restful接口设计规范总结"><a href="#restful接口设计规范总结" class="headerlink" title="restful接口设计规范总结"></a>restful接口设计规范总结</h1><h3 id="一、重要概念："><a href="#一、重要概念：" class="headerlink" title="一、重要概念："></a>一、重要概念：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">REST,即Representational State Transfer的缩写。我对这个词组的翻译是&quot;表现层状态转化&quot;。</span><br><span class="line"></span><br><span class="line">**Resource**（资源） ：对象的单个实例。 例如，一只动物。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</span><br><span class="line"></span><br><span class="line">**集合**：对象的集合。 例如，动物。</span><br><span class="line"></span><br><span class="line">**第三方**：使用我们接口的开发者</span><br><span class="line"></span><br><span class="line">**表现层（Representation）**</span><br><span class="line"></span><br><span class="line">&quot;资源&quot;是一种信息实体，它可以有多种外在表现形式。我们把&quot;资源&quot;具体呈现出来的形式，叫做它的&quot;表现层&quot;（Representation）。</span><br><span class="line"></span><br><span class="line">**状态转化（State Transfer）**</span><br><span class="line"></span><br><span class="line">访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生&quot;状态转化&quot;（State Transfer）。而这种转化是建立在表现层之上的，所以就是&quot;表现层状态转化&quot;。</span><br><span class="line"></span><br><span class="line">客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</span><br><span class="line"></span><br><span class="line">它们分别对应四种基本操作：**GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。**</span><br><span class="line"></span><br><span class="line">比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</span><br><span class="line"></span><br><span class="line">URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的&quot;.html&quot;后缀名是不必要的，因为这个后缀名表示格式，属于&quot;表现层&quot;范畴，而URI应该只代表&quot;资源&quot;的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对&quot;表现层&quot;的描述。</span><br></pre></td></tr></table></figure><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>（1）每一个URI代表一种资源；</p><p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><h3 id="二、REST接口规范"><a href="#二、REST接口规范" class="headerlink" title="二、REST接口规范"></a>二、REST接口规范</h3><h4 id="1、动作"><a href="#1、动作" class="headerlink" title="1、动作"></a>1、动作</h4><p>GET （SELECT）：从服务器检索特定资源，或资源列表。<br> POST （CREATE）：在服务器上创建一个新的资源。<br> PUT （UPDATE）：更新服务器上的资源，提供整个资源。<br> PATCH （UPDATE）：更新服务器上的资源，仅提供更改的属性。<br> DELETE （DELETE）：从服务器删除资源。</p><p>首先是四个半种动作：<br> post、delete、put&#x2F;patch、get<br> 因为put&#x2F;patch只能算作一类，所以将patch归为半个。</p><p>另外还有有两个较少知名的HTTP动词：<br> HEAD - 检索有关资源的元数据，例如数据的哈希或上次更新时间。<br> OPTIONS - 检索关于客户端被允许对资源做什么的信息。</p><h4 id="2、路径（接口命名）"><a href="#2、路径（接口命名）" class="headerlink" title="2、路径（接口命名）"></a>2、路径（接口命名）</h4><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><p>接口尽量使用名词，禁止使用动词，下面是一些例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET         /zoos：列出所有动物园</span><br><span class="line">POST        /zoos：新建一个动物园</span><br><span class="line">GET         /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT         /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH       /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE      /zoos/ID：删除某个动物园</span><br><span class="line">GET         /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE      /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars</span><br><span class="line">/createNewCar</span><br><span class="line">/deleteAllRedCars</span><br></pre></td></tr></table></figure><p>再比如，某个URI是&#x2F;posts&#x2F;show&#x2F;1，其中show是动词，这个URI就设计错了，正确的写法应该是&#x2F;posts&#x2F;1，然后用GET方法表示show。</p><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p><blockquote><p>POST &#x2F;transaction HTTP&#x2F;1.1<br> 　Host: 127.0.0.1<br> 　from&#x3D;1&amp;to&#x3D;2&amp;amount&#x3D;500.00</p></blockquote><p>理清资源的层次结构，比如业务针对的范围是学校，那么学校会是一级资源(&#x2F;school)，老师(&#x2F;school&#x2F;teachers)，学生(&#x2F;school&#x2F;students)就是二级资源。</p><h4 id="3、版本（Versioning）"><a href="#3、版本（Versioning）" class="headerlink" title="3、版本（Versioning）"></a>3、版本（Versioning）</h4><p>应该将API的版本号放入URL。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.example.com/v1/</span></span><br></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h4 id="4、过滤信息（Filtering）"><a href="#4、过滤信息（Filtering）" class="headerlink" title="4、过滤信息（Filtering）"></a>4、过滤信息（Filtering）</h4><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。<br> 下面是一些常见的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">limit</span>=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page_number=2&amp;page_size=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br><span class="line">参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，</span><br><span class="line">GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</span><br></pre></td></tr></table></figure><h4 id="5、状态码（Status-Codes）"><a href="#5、状态码（Status-Codes）" class="headerlink" title="5、状态码（Status Codes）"></a>5、状态码（Status Codes）</h4><p>状态码范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1xx 信息，请求收到，继续处理。范围保留用于底层HTTP的东西，你很可能永远也用不到。</span><br><span class="line">2xx 成功，行为被成功地接受、理解和采纳</span><br><span class="line">3xx 重定向，为了完成请求，必须进一步执行的动作</span><br><span class="line">4xx 客户端错误，请求包含语法错误或者请求无法实现。范围保留用于响应客户端做出的错误，例如。他们提供不良数据或要求不存在的东西。这些请求应该是幂等的，而不是更改服务器的状态。</span><br><span class="line">5xx 范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，甚至</span><br><span class="line">开发人员也通常没法处理，发送这类状态码的目的以确保客户端获得某种响应。</span><br><span class="line">当收到5xx响应时，客户端不可能知道服务器的状态，所以这类状态码是要尽可能的避免。</span><br></pre></td></tr></table></figure><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> OK - <span class="selector-attr">[GET]</span>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line"><span class="number">201</span> CREATED - <span class="selector-attr">[POST/PUT/PATCH]</span>：用户新建或修改数据成功。</span><br><span class="line"><span class="number">202</span> Accepted - <span class="selector-attr">[*]</span>：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line"><span class="number">204</span> NO <span class="attribute">CONTENT</span> - <span class="selector-attr">[DELETE]</span>：用户删除数据成功。</span><br><span class="line"><span class="number">400</span> INVALID REQUEST - <span class="selector-attr">[POST/PUT/PATCH]</span>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line"><span class="number">401</span> Unauthorized - <span class="selector-attr">[*]</span>：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line"><span class="number">403</span> Forbidden - <span class="selector-attr">[*]</span> 表示用户得到授权（与<span class="number">401</span>错误相对），但是访问是被禁止的。</span><br><span class="line"><span class="number">404</span> NOT FOUND - <span class="selector-attr">[*]</span>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line"><span class="number">406</span> Not Acceptable - <span class="selector-attr">[GET]</span>：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line"><span class="number">410</span> Gone -<span class="selector-attr">[GET]</span>：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line"><span class="number">422</span> Unprocesable entity - <span class="selector-attr">[POST/PUT/PATCH]</span> 当创建一个对象时，发生一个验证错误。</span><br><span class="line"><span class="number">500</span> INTERNAL SERVER ERROR - <span class="selector-attr">[*]</span>：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br><span class="line"><span class="number">502</span> 网关错误</span><br><span class="line"><span class="number">503</span> Service Unavailable</span><br><span class="line"><span class="number">504</span> 网关超时</span><br></pre></td></tr></table></figure><ol><li>request获取参数中文出现乱码</li></ol><p>原因:</p><p>汉字在不同的编码表中的码值不一样，那么在使用不同的编码表进行解码与编码操作时，就会出现乱码问题.</p><p>浏览器在提交的时候使用utf-8编码</p><p>Tomcat得到请求参数是使用iso8859-1进行了解码，封装到了request中。</p><p>在通过request获取请求信息就是乱码。</p><p>解决:</p><p>先使用iso8859-1进行编码</p><p>在使用utf-8进行解码</p><p>每个参数都要new才行(get,post方法都可行)</p><p>username&#x3D; new String(username.getBytes(“iso8859-1”),”utf-8”);</p><p>如果请求方式是POST,</p><p>可以直接使用request.setCharacterEncoding(“utf-8”);就可以解决。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸟的springboot常用注解总结</title>
      <link href="/2022/03/10/JAVA/%E8%8F%9C%E9%B8%9F%E7%9A%84springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/10/JAVA/%E8%8F%9C%E9%B8%9F%E7%9A%84springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>说明<br>@SpringBootApplication<br>@Component、@Service、@Controller、@Repository<br>@ResponseBody<br>@RestController<br>@AutoWired、@Qualifier、@Resource<br>@RequestMapping、@GetMapping、@PostMapping<br>@Value、@ConfigurationProperties、@PropertySource<br>@Configuration、@Bean<br>@RequestParam、@RequestBody、@PathVariable、@RequestHeader、@CookieValue<br>说明<br>更新时间：2020&#x2F;8&#x2F;12 22:14，更新了@RequestParam等注解<br>更新时间：2020&#x2F;8&#x2F;6 18:00，更新了@AutoWired等注解<br>更新时间：2020&#x2F;8&#x2F;2 17:32，更新了@SpringBootApplication等注解</p><p>本文主要对网上的springboot常见注解和自己本人在学习的过程中遇到的注解的一次总结，本文会持续更新，不断地扩充</p><p>本文仅为记录学习轨迹，如有侵权,联系删除</p><p>@SpringBootApplication<br>包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；</p><p>相关注解    说明<br>@ComponentScan    用来自动扫描被这些注解标识的类，最终生成ioc容器里的bean，默认扫描范围是@ComponentScan注解所在配置类包及子包的类<br>@SpringBootConfiguration    与@Configuration作用相同，都是用来声明当前类是一个配置类，这里表明是springboot主类使用的配置类<br>@EnableAutoConfiguration    是springboot实现自动化配置的核心注解，通过这个注解把spring应用所需的bean注入容器中<br>@Component、@Service、@Controller、@Repository<br>这几个注解放在一起是因为功能基本一样的，都是将类注入到spring容器中，只不过它们使用的场景不同，被@Component,@Service,@Controller,@Repository注解标注的类，这些类会被纳入进spring容器中管理。</p><p>注解    说明<br>@Repository    持久层（dao）注入spring容器<br>@Service    业务逻辑层（server）注入spring容器<br>@Controller    控制层（controller）注入spring容器<br>@Component    普通pojo注入spring容器<br>@ResponseBody<br>@ResponseBody可以作用在方法上或类上，表示该方法的返回结果直接写入 HTTP response body 中，而不会被解析为跳转路径，即不会经过视图解析器，返回什么数据即在页面输入什么数据。</p><p>注解    说明<br>@ResponseBody    @ResponseBody的作用其实是将java对象转为json格式的数据。<br>测试如下</p><p>@RestController<br>该注解是@Controller和@ResponseBody的结合体，一般用于类，作用等于在类上面添加了@ResponseBody和@Controller</p><p>@AutoWired、@Qualifier、@Resource<br>这3个注解都是基于注解方式进行自动装配，在容器里面将查找到的bean返回，一般@AutoWired用得最多，@Qualifier则需要配合@AutoWired使用，@Resource则是可以通过名字进行自动装配</p><p>注解    说明<br>@AutoWired    @Autowired默认按类型装配，如果发现找到多个bean，则按照name方式比对，如果还有多个，则报出异常<br>@Qualifier    spring的注解，按名字注入 一般当出现两个及以上bean时,不知道要注入哪个，结合@AutoWired使用<br>@Resource    默认按名称注入例如@Resource(name &#x3D; “zhaozhao”)则根据name属性注入找不到则报错，若无name属性则根据属性名称注入，如果匹配不成功则按照类型匹配匹配不成功则报错。<br>@AutoWired</p><p>@Qualifier<br>当有一个接口的多个实现类时，只用@AutoWired会报错，因为它有多个接口的实现类，不知道你要找哪一个，这个时候就需要在注入bean的时候起个名字，然后用@Qualifier注解指定哪一个bean(按照名字注入与装配)</p><p>@Resource<br>该注解的使用相当于@AutoWired和@Qualifier配合使用的效果</p><p>@RequestMapping、@GetMapping、@PostMapping<br>这3个注解功能也是类似的，通过这3个注解来映射请求，也就是通过它来指定控制器可以处理哪些URL请求，用在方法上，可以通过配置的url进行访问</p><p>注解    说明<br>@RequestMapping    @RequestMapping（url），通过该注解就可以通过配置的url进行访问，方式可以是get或post请求，两种方式均可<br>@GetMapping    @GetMapping（url） ，功能类似的，只是这个限定了只能是Get请求<br>@PostMapping    @PostMapping（url），功能类似的，只是这个限定了只能是Post请求<br>@RequestMapping<br>发起get请求或者post请求都可以</p><p>@GetMapping<br>只能用get请求</p><p>@PostMapping<br>只能发起post请求</p><p>@Value、@ConfigurationProperties、@PropertySource<br>注解    说明<br>@Value    用于获取bean的属性，一般用于读取配置文件的数据，作用在变量上<br>@ConfigurationProperties    用于注入Bean属性，然后再通过当前Bean获取注入值，作用在类上<br>@PropertySource    用于指定要读取的配置文件，可以和@Value或@ConfigurationProperties配合使用<br>注意：@PropertySource不支持yml文件读取。</p><p>@Value<br>这里用yml配置文件进行演示，propres配置文件也是同样的效果，在application.yml配置文件里设置开发环境的的配置文件（dev），这样用@Value获取到的就是开发环境的配置文件的数据，切换成生产环境（pro）则获取到的是生产环境的数据</p><p>@ConfigurationProperties<br>该注解可以直接注入整个类的数据，作用于类</p><p>配置文件如下，这里使用pro环境</p><p>测试</p><p>@PropertySource</p><p>注意：@PropertySource不支持yml文件读取。<br>配置文件如下：people.properties</p><p>测试</p><p>当然@PropertySource还可以和@Value配合使用，即一个一个注入值。</p><p>@Configuration、@Bean<br>@Configuration作用于类上面，表明这是一个配置类，@Bean产生一个Bean对象加入Spring IOC容器</p><p>注意：@Configuration标注在类上，相当于把该类作为spring的xml配置文件中，作用为：配置spring容器(应用上下文)</p><p>注解    说明<br>@Configuration    作用于类上表示这是一个配置类，可理解为用spring的时候xml里面的&lt; beans&gt;标签<br>@Bean    产生bean对象加入容器，作用于方法，可理解为用spring的时候xml里面的标签<br>一般这两个注解同时配合使用</p><p>新建配置类，将User加入容器，并自定义生命周期</p><p>测试</p><p>@RequestParam、@RequestBody、@PathVariable、@RequestHeader、@CookieValue<br>这3个注解放在一起主要是经常在控制层用来接收参数的</p><p>注解    说明<br>@RequestParam    获取查询参数。即url?name&#x3D;这种形式<br>@PathVariable    获取路径参数。即url&#x2F;{id}这种形式。<br>@RequestParam    获取Body的参数，一般用于post获取参数<br>@RequestHeader    获取请求头的信息<br>@CookieValue    获取Cookie的信息<br>@RequestParam<br>@RequestParam主要用于接收url?后面的参数，get或post请求，只要后面的url?有参数都可以获取到对应的参数</p><p>@RequestParam注解有几个比较重要的属性，required 表示是否必须，默认为 true，必须。defaultValue 可设置请求参数的默认值。value 为接收url的参数名（相当于key值）。</p><p>示例代码如下</p><pre><code>@GetMapping(&quot;/requestParam&quot;)@ResponseBodypublic Map&lt;String, String&gt; requestParam(        UserDto userDto,//通过一个实体类来接收，字段名必须一致        @RequestParam(value = &quot;id&quot;, required = false) String userId,        @RequestParam(value = &quot;name&quot;, required = false) String userName,        @RequestParam(value = &quot;pageIndex&quot;, required = true, defaultValue = &quot;1&quot;) String pageIndex,        @RequestParam(value = &quot;pageSize&quot;, required = true, defaultValue = &quot;5&quot;) String pageSize) &#123;    Map&lt;String, String&gt; map = new HashMap&lt;&gt;();    map.put(&quot;userDto&quot;,userDto.toString());    map.put(&quot;id&quot;, userId);    map.put(&quot;name&quot;, userName);    map.put(&quot;pageIndex&quot;, pageIndex);    map.put(&quot;pageSize&quot;, pageSize);    return map;&#125;</code></pre><p>运行</p><p>@PathVariable<br>该注解主要用于获取路径参数，像url&#x2F;{id}&#x2F;{name}这种形式的参数都可以，get获取post请求均可</p><p>示例代码如下：</p><pre><code>@PostMapping(&quot;/pathVariable/&#123;id&#125;/&#123;name&#125;&quot;)@ResponseBodypublic Map&lt;String, String&gt; pathVariable(        @PathVariable(name = &quot;id&quot;) String userId,        @PathVariable(name = &quot;name&quot;) String userName) &#123;    Map&lt;String, String&gt; map = new HashMap&lt;&gt;();    map.put(&quot;id&quot;, userId);    map.put(&quot;name&quot;, userName);    return map;&#125;</code></pre><p>@RequestBody<br>该注解用于获取请求体数据（body）,get没有请求体，故而一般用于post请求</p><p>示例代码如下：</p><pre><code>@PostMapping(&quot;/test01&quot;)@ResponseBodypublic UserDto test01(@RequestBody UserDto userDto) &#123;    return userDto;&#125;@PostMapping(&quot;/test02&quot;)@ResponseBodypublic String test02(@RequestBody String str) &#123;    return str;&#125;</code></pre><p>运行结果</p><p>注意，如果要传多个参数过去只能将其封装成一个类，如果是出现了多个@RequestBody注解访问的时候会报400错误，例如下面这种代码就是错误的</p><pre><code>@PostMapping(&quot;/requestBody&quot;)@ResponseBodypublic Map&lt;String,String&gt; requestBody(        @RequestBody(required = true) String id,        @RequestBody(required = true) String name,        @RequestBody(required = false) String sex,        @RequestBody(required = false) String age        )&#123;    Map&lt;String,String&gt; map = new HashMap&lt;&gt;();    map.put(&quot;id&quot;,&quot;id&quot;);    map.put(&quot;name&quot;,&quot;name&quot;);    return map;&#125;</code></pre><p>@RequestHeader<br>示例代码如下</p><pre><code>@PostMapping(&quot;/requestHeader&quot;)@ResponseBodypublic String requestBody03(@RequestHeader(name = &quot;Content-Type&quot;) String contentType)&#123;    return contentType;&#125;</code></pre><p>运行结果</p><p>@CookieValue<br>由于postman模拟cookie本人不会弄，只能用别人的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/demo3&quot;)</span><br><span class="line">public void demo3(@RequestHeader(name = &quot;myHeader&quot;) String myHeader,</span><br><span class="line">        @CookieValue(name = &quot;myCookie&quot;) String myCookie) &#123;</span><br><span class="line">    System.out.println(&quot;myHeader=&quot; + myHeader);</span><br><span class="line">    System.out.println(&quot;myCookie=&quot; + myCookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lombok注解    应用场景<br>@Data    Getter、Setter、RequiredArgsConstructor、ToString、EqualsAndHashCode<br>@Table    当数据库的表名和实体类不一致时，name 属性可以指定数据库的表，这样实体类和数据库的表就可以有映射关系了<br>@NoArgsConstructor    无参构造方法<br>@AllArgsConstructor    有参构造方法<br>@Builder    类名.builder()就可以进行属性填充<br>@RequiredArgsConstructor(onConstructor &#x3D; @__(@Autowired))    注入场景<br>@Cleanup    关流</p><p>SpringBoot注解    应用场景<br>@RestControllere    Controller层<br>@Service    逻辑处理层<br>@@Repository    持久理层<br>@Component    自定义类，例如工具类<br>@GetMapping    GET请求<br>@PostMapping    POST请求<br>@ResponseBody    返回接json字符串处理<br>@PathVariable    url&#x2F;{参数}<br>@RestController    @Controller+@ResponseBody<br>@Autowired    注入<br>@Resource    注入<br>@SpringBootApplication    启动类注解<br>@MapperScan    扫描mybatis那些包里面的接口<br>@RequestParam    url?参数&#x3D;value<br>@Param ()    mybatis注解</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios五种请求</title>
      <link href="/2022/03/10/%E5%89%8D%E7%AB%AF/axios%E4%BA%94%E7%A7%8D%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/03/10/%E5%89%8D%E7%AB%AF/axios%E4%BA%94%E7%A7%8D%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>axios五种请求</p><p>　　1.get: 一般多用于获取数据　　</p><p>不带参数    　　<br>方式一: axios({ methods: ‘get’, url: ‘&#x2F;ulr’ })<br>方式二: axios.get(‘&#x2F;url’)</p><p>带参数<br>    方式一: axios.get(‘&#x2F;url’, {params: {id: 12}})  &#x2F;&#x2F;请求的地址实际为 localhost:8080&#x2F;url?id&#x3D;12<br>    方式二: axios({<br>                   methods: ‘get’,<br>                   url: ‘url’,<br>                   params: {<br>                        id:12<br>                   }<br>               })<br>2.post: 主要提交表单数据和上传文件</p><p> let data &#x3D; {}<br> let config &#x3D; {}<br> 方式一:  axios.post(‘&#x2F;url’,data,config)</p><p> 方式二:  axios({<br>           methods: ‘post’,<br>           url: ‘&#x2F;url’,<br>           data: data,<br>           config: config<br>          })　　　　<br>其中 data可以有两种格式form-data(图片上传,文件上传)  applicition&#x2F;json（目前比较流行）<br>上面两种方法 都是 appliction&#x2F;json格式　　　　<br>如下为: form-data<br>　　　　let formData &#x3D; new FormData()<br>       let data &#x3D; {<br>　　　　　　id: 12<br>　　　　}<br>       for (let key in data) {<br>　　　　    formData.append(key, data[key]) &#x2F;&#x2F;创建form-data格式数据<br>       }<br>　　　　 axios({<br>　　　　　　methods: ‘post’,<br>　　　　    url: ‘&#x2F;url’,<br>　　　　　　data: formData<br>　　　　 })<br>　该请求发出之后可以在浏览器中查看此次请求的request header里面content-type: 为 form-data形式</p><p><strong>form-data、x-www-form-urlencoded：需要使用@RequestParam</strong></p><p><strong>application&#x2F;json： 需要使用@RequestBody</strong></p><p>因为这里我用axios处理的 contentType 为 application&#x2F;x-www-form-urlencoded<br>而且后端是用 @RequestParam 来接收前端传过来的参数的，所以post传参的时候用的是 qs.stringify(data) ,若后台使用 @RequestBody，则应该使用 JSON.stringify(data) 来转化格式。其导致这个坑的最主要原因就是后端中 @RequestParam 和**@RequestBody**的差别所致</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端接口交互</title>
      <link href="/2022/03/10/%E5%89%8D%E7%AB%AF/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E4%BA%A4%E4%BA%92/"/>
      <url>/2022/03/10/%E5%89%8D%E7%AB%AF/%E5%89%8D%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前后端接口交互"><a href="#前后端接口交互" class="headerlink" title="前后端接口交互"></a>前后端接口交互</h1><h4 id="一、axios发送get、post请求的几种方式"><a href="#一、axios发送get、post请求的几种方式" class="headerlink" title="一、axios发送get、post请求的几种方式"></a>一、axios发送get、post请求的几种方式</h4><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><ol><li><p>采用字符串拼接的方式进行传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.axios.post(`https://..../updateAddress?addressName=$&#123;this.addressName&#125;&amp;houseNumber=$&#123;this.houseNumber&#125;&amp;userName=$&#123;this.userName&#125;&amp;userPhone=$&#123;this.userPhone&#125;&amp;isdefault=$&#123;this.isDefault&#125;&amp;addressId=$&#123;this.addressId&#125;`)</span><br><span class="line">            .then(response =&gt; &#123;</span><br><span class="line">                //...</span><br><span class="line">            &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li></ol><p>2、json对象提交数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let data = &#123;</span><br><span class="line">        &#x27;user&#x27;: &#123; &#x27;id&#x27;: `$&#123;this.$user.getUserId()&#125;` &#125;,</span><br><span class="line">        &#x27;hideFlag&#x27;: &#x27;1&#x27;,</span><br><span class="line">        &#x27;content&#x27;: this.content,</span><br><span class="line">        &#x27;pictureUrl&#x27;: this.imgUrl</span><br><span class="line">      &#125;</span><br><span class="line">      this.axios.post(&#x27;https://...../submitFeedback&#x27;, data)</span><br><span class="line">        .then(this.postFeedBackSucc)</span><br><span class="line">        .catch((e) =&gt; &#123;</span><br><span class="line">          console.log(e)</span><br><span class="line">        &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>3、通过FormData表单形式传递参数</p><p>示例一：json对象字符串传递数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let data = new FormData()</span><br><span class="line">      data.append(&#x27;json&#x27;, JSON.stringify(&#123; &#x27;userId&#x27;: `45435465464` &#125;))</span><br><span class="line">      this.axios.post(&#x27;https://houqin.eooker.com/delivery/a/shop/merchantAPI/markList&#x27;, data, &#123;</span><br><span class="line">        header: &#123;</span><br><span class="line">          &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">            //.....</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((e) =&gt; &#123;</span><br><span class="line">          console.log(e)</span><br><span class="line">        &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>示例二：通过键值对的表单形式传递数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var formData=new FormData();</span><br><span class="line">formData.append(&#x27;user&#x27;,123456);</span><br><span class="line">formData.append(&#x27;pass&#x27;,12345678);</span><br><span class="line"> </span><br><span class="line">axios.post(&quot;/notice&quot;,formData)</span><br><span class="line">     .then((res) =&gt; &#123;return res&#125;)</span><br><span class="line">     .catch((err) =&gt; &#123;return err&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><ol><li>字符串拼接方式（不推荐）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_self.axios.get(`https://...../pay?orderNumber=$&#123;_self.orderNumber&#125;&amp;openId=$&#123;_self.$user.getOpenId()&#125;`).then(result =&gt; &#123;</span><br><span class="line">        //.....</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>\2. 通过 params对象传递数据（推荐）<br><strong>params参数必写 , 如果没有参数传{}也可以</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> let data = &#123; userId: this.$user.getUserId(), start: 0, size: 10 &#125;</span><br><span class="line">    this.axios.get(&#x27;https://..../listByUserId&#x27;, &#123; params: &#123; &#x27;json&#x27;: data &#125; &#125;)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">        //.....</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((e) =&gt; &#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="ResquestMapping-ResponseBody，PathVariable，-ResquestParam的用法"><a href="#ResquestMapping-ResponseBody，PathVariable，-ResquestParam的用法" class="headerlink" title="@ResquestMapping,@ResponseBody，PathVariable，@ResquestParam的用法"></a>@ResquestMapping,@ResponseBody，PathVariable，@ResquestParam的用法</h1><p>[(9条消息) @ResquestMapping,@ResponseBody，PathVariable，@ResquestParam的用法_melody_sy博客-CSDN博客](<a href="https://blog.csdn.net/s740556472/article/details/55804050?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=@PathVarable">https://blog.csdn.net/s740556472/article/details/55804050?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=@PathVarable</a> @ResquestParam @R&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-55804050.pc_search_result_control_group&amp;spm&#x3D;1018.2226.3001.4187)</p><p><a href="https://cloud.tencent.com/developer/article/1683822">springmvc中@PathVariable和@RequestParam的区别 - 云+社区 - 腾讯云 (tencent.com)</a></p><p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p><p>后台 Controller类中对应的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/login.do&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object login(String name, String password, HttpSession session) &#123;</span><br><span class="line">user = userService.checkLogin(name, password);</span><br><span class="line">session.setAttribute(&quot;user&quot;, user);</span><br><span class="line">return new JsonResult(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@RequestBody是作用在形参列表上，用于将前台发送过来固定格式的数据【xml格式 或者 json等】封装为对应的 JavaBean 对象，<br>封装时使用到的一个对象是系统默认配置的 HttpMessageConverter进行解析，然后封装到形参上。<br>如上面的登录后台代码可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/login.do&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object login(@RequestBody User loginUuser, HttpSession session) &#123;</span><br><span class="line">user = userService.checkLogin(loginUser);</span><br><span class="line">session.setAttribute(&quot;user&quot;, user);</span><br><span class="line">return new JsonResult(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex 中辅助函数mapState的基本用法详解</title>
      <link href="/2022/03/10/%E5%89%8D%E7%AB%AF/vuex%20%E4%B8%AD%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0mapState%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/03/10/%E5%89%8D%E7%AB%AF/vuex%20%E4%B8%AD%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0mapState%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="vuex-中辅助函数mapState的基本用法详解"><a href="#vuex-中辅助函数mapState的基本用法详解" class="headerlink" title="vuex 中辅助函数mapState的基本用法详解"></a><a href="https://www.cnblogs.com/aidixie/p/14977850.html">vuex 中辅助函数mapState的基本用法详解</a></h1><h3 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a><code>mapState</code> 辅助函数</h3><p>　　当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// store.js</span><br><span class="line">/**</span><br><span class="line">    vuex的核心管理对象模块:store</span><br><span class="line"> */</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;;</span><br><span class="line">import vuexTest from &#x27;./modules/vuexTest&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">// 状态对象</span><br><span class="line">const state = &#123; // 初始化状态 这里放置的状态可以被多个组件共享</span><br><span class="line">    count: 1,</span><br><span class="line">    count1: 1,</span><br><span class="line">    count2: 2,</span><br><span class="line">    count3: 3,</span><br><span class="line">    name: &#x27;daming&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">const mutations = &#123;&#125;;</span><br><span class="line">const actions = &#123;&#125;;</span><br><span class="line">const getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state, // 状态</span><br><span class="line">    mutations, // 包含多个更新state函数的对象</span><br><span class="line">    actions, // 包含多个队形事件回调函数的对象</span><br><span class="line">    getters, // 包含多个getter计算属性函数的对象</span><br><span class="line">    modules: &#123; // 模块化</span><br><span class="line">        vuexTest</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　1、在界面或组件中不使用mapState获取vuex中state的状态</p><p>　　虽然将所有的状态放入Vuex，会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态，比如temp变量,hello, number作为组件的局部状态。</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- test.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">    &#123;&#123;helloName&#125;&#125;</span><br><span class="line">    &#123;&#123;addNumber&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hello: &#x27;hello&#x27;,</span><br><span class="line">      number: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"></span><br><span class="line">    // 由于 Vuex 的状态存储是响应式的，所以可以使用计算属性来获得某个状态</span><br><span class="line">    // 通过下面的计算属性，就可以在当前组件中访问到count,name，helloName，addNumber 在模板中我们通过大括号符号打印出来，当然这些可以在vue中使用，比如在watch中监听，在mounted中使用</span><br><span class="line"></span><br><span class="line">    // 下面的计算属性涉及到了vuex管理的状态</span><br><span class="line">    count() &#123; // 这实际上是ES6中对象的简化写法 完整写法是 count: function &#123; return this.$store.state.count &#125;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    name() &#123; // 这实际上是ES6中对象的简化写法 完整写法是 name: function &#123; return this.$store.state.count &#125;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    helloName: function (state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">      return this.hello + this.$store.state.name</span><br><span class="line">    &#125;,</span><br><span class="line">    addNumber: function (state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">      return this.number + this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">    // 但有一个问题</span><br><span class="line">    // 当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。比如上面的name(),count(),helloName(),显得重复，代码冗长</span><br><span class="line">    // 为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性，让你少按几次键：</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">     helloName(newVal,oldVal)&#123;</span><br><span class="line">         console.log(newVal);</span><br><span class="line">         console.log(oldVal);</span><br><span class="line">     &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">      console.log(this.helloName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　2、在组件、界面中使用mapState获取vuex中state的数据</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- test.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    &#123;&#123;count1&#125;&#125;</span><br><span class="line">    &#123;&#123;repeatCount&#125;&#125;</span><br><span class="line">    &#123;&#123;count3&#125;&#125;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">    &#123;&#123;helloName&#125;&#125;</span><br><span class="line">    &#123;&#123;addNumber&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hello: &#x27;hello&#x27;,</span><br><span class="line">      number: 1,</span><br><span class="line">      count2: 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 数组形式</span><br><span class="line">     * 当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</span><br><span class="line">     * */</span><br><span class="line">    ...mapState([&quot;count&quot;, &quot;name&quot;]),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对象形式</span><br><span class="line">     */</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      count, // 这种就是count:&quot;count&quot;, 的简写</span><br><span class="line">      count1: &quot;count1&quot;,</span><br><span class="line">      repeatCount: &quot;count2&quot;, // 当组件中与vuex中的字符已经出现重复时，使用 repeatCount 来映射 store.state.count2</span><br><span class="line">      count3: (state) =&gt; &#123; // 映射 count3 为 store.state.conut3的值</span><br><span class="line">        return state.count3</span><br><span class="line">      &#125;,</span><br><span class="line">      helloName: function (state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">        return this.hello + state.name</span><br><span class="line">      &#125;,</span><br><span class="line">      addNumber: function (state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">        return this.number + state.count</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    helloName(newVal, oldVal) &#123;</span><br><span class="line">      console.log(newVal);</span><br><span class="line">      console.log(oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.helloName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　3、modules的vuexTest模块中state数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**`` ``* vuexTest.js`` ``* modules 中的数据`` ``*/``export ``default` `&#123;``  ``namespaced: ``true``,``  ``state: &#123;``    ``moduleVal: 1,``    ``moduleName: ``&quot;战战兢兢&quot;``  ``&#125;,``  ``getters: &#123;``  ``&#125;,``  ``mutations: &#123;``  ``&#125;,``  ``actions: &#123;``  ``&#125;``&#125;</span><br></pre></td></tr></table></figure><p>　　4、在界面或组件中不使用mapState获取模块modules vuexTest中state的状态</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- module test.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &#123;&#123;moduleVal&#125;&#125;</span><br><span class="line">    &#123;&#123;moduleName&#125;&#125;</span><br><span class="line">    &#123;&#123;moduleNameOther&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hello: &#x27;hello&#x27;,</span><br><span class="line">      number: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    moduleVal()&#123;</span><br><span class="line">        return this.$store.state.vuexTest.moduleVal</span><br><span class="line">    &#125;,</span><br><span class="line">    moduleName()&#123;</span><br><span class="line">        return this.$store.state.vuexTest.moduleVal</span><br><span class="line">    &#125;,</span><br><span class="line">    moduleNameOther()&#123;</span><br><span class="line">        // 当组件中与vuex中的字符已经出现重复时，使用 moduleNameOther 来映射 store.state.vuexTest.moduleName</span><br><span class="line">        return this.$store.state.vuexTest.moduleVal </span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    helloName(newVal, oldVal) &#123;</span><br><span class="line">      console.log(newVal);</span><br><span class="line">      console.log(oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.addNumber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>　　5、在界面或组件中使用mapState获取模块modules vuexTest中state的状态</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- module test.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &#123;&#123;moduleVal&#125;&#125;</span><br><span class="line">    &#123;&#123;moduleName&#125;&#125;</span><br><span class="line">    &#123;&#123;moduleNameOther&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hello: &#x27;hello&#x27;,</span><br><span class="line">      number: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 数组形式</span><br><span class="line">     * 当映射的计算属性的名称与 与模块中vuexTest中state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组，</span><br><span class="line">     * */</span><br><span class="line">    ...mapState(&quot;vuexTest&quot;, [&quot;moduleVal&quot;, &quot;moduleName&quot;]),</span><br><span class="line">    // &quot;vuexTest&quot; 指向模块vuexTest，&quot;moduleVal&quot;表示store.vuexTest.moduleVal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对象形式</span><br><span class="line">     */</span><br><span class="line">    // 第一种对象方式</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      moduleVal: &quot;vuexTest/moduleVal&quot;,</span><br><span class="line">      moduleNameOther: &quot;vuexTest/moduleName&quot; // 表示 moduleNameOther 映射到vuexTest模块中moduleName</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    ...mapState(&quot;vuexTest&quot;, &#123;</span><br><span class="line">      moduleVal, // 这种就是moduleVal:&quot;moduleVal&quot;, 的简写</span><br><span class="line">      moduleName: &quot;moduleName&quot;,</span><br><span class="line">      moduleNameOther: &quot;moduleName&quot;, // 当组件中与vuex中的字符已经出现重复时，使用 moduleNameOther 来映射 store.state.vuexTest.moduleName</span><br><span class="line">      moduleVal: (state) =&gt; &#123; // 映射 moduleVal 为 store.state.vuexTest.moduleVal的值</span><br><span class="line">        return state.moduleVal</span><br><span class="line">      &#125;,</span><br><span class="line">      helloName: function (state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">        return this.hello + state.moduleName</span><br><span class="line">      &#125;,</span><br><span class="line">      addNumber(state) &#123; // 为了能够使用 `this` 获取局部状态，必须使用常规函数，不能使用箭头函数</span><br><span class="line">        return this.number + state.moduleVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    helloName(newVal, oldVal) &#123;</span><br><span class="line">      console.log(newVal);</span><br><span class="line">      console.log(oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.addNumber);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础框架</title>
      <link href="/2022/03/10/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/03/10/%E5%89%8D%E7%AB%AF/js%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200911160028302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDE0Mjcy,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h2 id="一、js的简介"><a href="#一、js的简介" class="headerlink" title="一、js的简介"></a>一、js的简介</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、js是什么</span><br><span class="line">    js是可以嵌入到html中，是基于对象和事件驱动的脚本语言</span><br><span class="line">       特点：</span><br><span class="line">         (1)交互性</span><br><span class="line">         (2)安全性：js不能访问本地磁盘</span><br><span class="line">         (3)跨平台：浏览器中都具备js解析器</span><br><span class="line">2、js能做什么</span><br><span class="line">       (1)js能动态的修改(增删)html和css的代码</span><br><span class="line">       (2)能动态的校验数据</span><br><span class="line">    </span><br><span class="line">3、js历史及组成</span><br><span class="line">       ECMAScript   BOM(浏览器对象模型)  DOM(文档对象模型)   </span><br><span class="line">4、js被引入的方式</span><br><span class="line">    (1)内嵌脚本</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;button&quot; onclick=&quot;alert(&#x27;xxx&#x27;)&quot; /&gt;           </span><br><span class="line">    (2)内部脚本</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            alert(&quot;xxx&quot;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">​    (3)外部脚本</span><br><span class="line">​        首先先创建一个js文件</span><br><span class="line">​        其次在html中引入</span><br><span class="line"></span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; src=&quot;demo1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">js代码放在哪？</span><br><span class="line">    放在哪都行 但是在不影响html功能的前提下 越晚加载越好</span><br></pre></td></tr></table></figure><h2 id="二、js基本语法"><a href="#二、js基本语法" class="headerlink" title="二、js基本语法"></a>二、js基本语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">1、变量</span><br><span class="line">    (1)</span><br><span class="line">        var x = 5;</span><br><span class="line">        x = &#x27;javascript&#x27;;</span><br><span class="line">        var y = &quot;hello&quot;;</span><br><span class="line">        var b = true;</span><br><span class="line">    (2)</span><br><span class="line">        x = 5;</span><br><span class="line"></span><br><span class="line">2、原始数据类型</span><br><span class="line">    (1)number:数字类型</span><br><span class="line">    (2)string：字符串类型</span><br><span class="line">    (3)boolean:布尔类型</span><br><span class="line">    (4)null:空类型</span><br><span class="line">    (5)underfind:未定义</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    注意：number、boolean、string是伪对象</span><br><span class="line">    </span><br><span class="line">    类型转换：</span><br><span class="line">        number\boolean转成string</span><br><span class="line">            toString();</span><br><span class="line">        string\boolean转成number</span><br><span class="line">            parseInt()</span><br><span class="line">            parseFloat()</span><br><span class="line">            boolean不能转</span><br><span class="line">            string可以将数字字符串转换成number 如果“123a3sd5” 转成123</span><br><span class="line">        强制转换</span><br><span class="line">            Boolean()   强转成布尔</span><br><span class="line">                数字强转成布尔  非零就是true   零就是false</span><br><span class="line">                字符串强转成布尔  非“”(空字符串)就是true   空字符串“”就是false</span><br><span class="line">            Number()    强转成数字</span><br><span class="line">                布尔转数字 true转成1  false转成0</span><br><span class="line">                字符串转数字 不能强转</span><br><span class="line"></span><br><span class="line">3、引用数据类型</span><br><span class="line">      java:    Object obj = new Object();</span><br><span class="line">      js:      var obj = new Object();</span><br><span class="line">               var num = new Number();  </span><br><span class="line"></span><br><span class="line">4、运算符</span><br><span class="line">    (1)赋值运算符</span><br><span class="line">        var x = 5;</span><br><span class="line">    (2)算数运算符</span><br><span class="line">        + - * / %</span><br><span class="line">        +: 遇到字符串变成连接</span><br><span class="line">        -：先把字符串转成数字然后进行运算</span><br><span class="line">        *: 先把字符串转成数字然后进行运算</span><br><span class="line">        /: 先把字符串转成数字然后进行运算</span><br><span class="line">    (3)逻辑运算符</span><br><span class="line">        &amp;&amp;  ||</span><br><span class="line">    (4)比较运算符</span><br><span class="line">        &lt;   &gt;   &gt;=  &lt;=  !=  ==</span><br><span class="line">        ===:全等：类型与值都要相等</span><br><span class="line">    (5)三元运算符</span><br><span class="line">        3&lt;2?&quot;大于&quot;:&quot;小于&quot;</span><br><span class="line">    (6)void运算符</span><br><span class="line">        &lt;a href=&quot;javascript:void(0);&quot;&gt;xxxxxx&lt;/a&gt;</span><br><span class="line">    (7)类型运算符</span><br><span class="line">        typeof:判断数据类型 返回我的数据类型</span><br><span class="line">        instanceof：判断数据类型 是否是某种类型</span><br><span class="line">        var obj = new Object();</span><br><span class="line">        alert(typeof obj);//object</span><br><span class="line">        alert(obj instanceof Object);//true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、逻辑语句</span><br><span class="line">    (1)if-else</span><br><span class="line">        //条件:  //数字非0 字符串非空====true</span><br><span class="line">        if(9)&#123;</span><br><span class="line">            alert(&quot;true--&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            alert(&quot;false--&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    (2)switch</span><br><span class="line">        var x = &quot;java&quot;;</span><br><span class="line">        switch(x)&#123;</span><br><span class="line">            case &quot;css&quot;:</span><br><span class="line">                alert(&quot;css&quot;);   break;</span><br><span class="line">            case &quot;js&quot;:</span><br><span class="line">                alert(&quot;js&quot;);    break;</span><br><span class="line">            case &quot;java&quot;:</span><br><span class="line">                alert(&quot;java&quot;);  break;</span><br><span class="line">            default:</span><br><span class="line">                alert(&quot;def&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">(3)for</span><br><span class="line">     for(var i = 0;i&lt;5;i++)&#123;</span><br><span class="line">        alert(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(4)for in</span><br><span class="line">    var arr = [1,3,5,7,&quot;js&quot;];</span><br><span class="line">     for(index in arr)&#123;//index代表角标</span><br><span class="line">        //alert(index);</span><br><span class="line">        alert(arr[index]);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="三、js内建对象"><a href="#三、js内建对象" class="headerlink" title="三、js内建对象"></a>三、js内建对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">(1)Number</span><br><span class="line">    创建方式：</span><br><span class="line">        var myNum=new Number(value);</span><br><span class="line">        var myNum=Number(value);</span><br><span class="line">    属性和方法：</span><br><span class="line">        toString():转成字符串</span><br><span class="line">        valueOf()：返回一个 Number 对象的基本数字值</span><br><span class="line"></span><br><span class="line">(2)Boolean</span><br><span class="line">    创建方式：</span><br><span class="line">        var bool = new Boolean(value);  </span><br><span class="line">        var bool = Boolean(value);</span><br><span class="line">    属性和方法：</span><br><span class="line">        toString():转成字符串</span><br><span class="line">        valueOf()：返回一个 Boolean 对象的基本值(boolean)  </span><br><span class="line">    </span><br><span class="line">(3)String</span><br><span class="line">    创建方式：</span><br><span class="line">        var str = new String(s);</span><br><span class="line">        var str = String(s);</span><br><span class="line">    属性和方法：</span><br><span class="line">        length：字符串的长度</span><br><span class="line">        charAt()：返回索引字符</span><br><span class="line">        charCodeAt：返回索引字符unicode</span><br><span class="line">        indexOf()：返回字符的索引</span><br><span class="line">        lastIndexOf()：逆向返回字符的索引</span><br><span class="line">        split()：将字符串按照特殊字符切割成数组</span><br><span class="line">        substr()：从起始索引号提取字符串中指定数目的字符</span><br><span class="line">        substring()：提取字符串中两个指定的索引号之间的字符</span><br><span class="line">        toUpperCase()：转大写</span><br><span class="line">    </span><br><span class="line">(4)Array</span><br><span class="line">    创建方式：</span><br><span class="line">        var arr = new Array();//空数组</span><br><span class="line">        var arr = new Array(size);//创建一个指定长度的数据</span><br><span class="line">        var arr = new Array(element0, element1, ..., elementn);//创建数组直接实例化元素</span><br><span class="line">        var arr = [];//空数组</span><br><span class="line">        var arr = [1,2,5,&quot;java&quot;];//创建数组直接实例化元素</span><br><span class="line">    属性和方法：</span><br><span class="line">        length:数组长度</span><br><span class="line">        join()：把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔一个</span><br><span class="line">        pop()：删除并返回最后元素</span><br><span class="line">        push()：向数组的末尾添加一个或更多元素，并返回新的长度</span><br><span class="line">        reverse()：反转数组</span><br><span class="line">        sort()：排序</span><br><span class="line"></span><br><span class="line">(5)Date</span><br><span class="line">    创建方式：   </span><br><span class="line">        var myDate = new Date();</span><br><span class="line">        var myDate = new Date(毫秒值);//代表从1970-1-1到现在的一个毫秒值</span><br><span class="line">    属性和方法</span><br><span class="line">        getFullYear()：年</span><br><span class="line">        getMonth()：月 0-11</span><br><span class="line">        getDate()：日 1-31</span><br><span class="line">        getDay()：星期 0-6</span><br><span class="line">        getTime()：返回1970年1月1日午夜到指定日期（字符串）的毫秒数</span><br><span class="line">        toLocalString()：获得本地时间格式的字符串</span><br><span class="line">        </span><br><span class="line">(6)Math</span><br><span class="line">    创建方式：   </span><br><span class="line">        Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()，像 Math.sin() 这样的函数只是函数，</span><br><span class="line">        不是某个对象的方法。您无需创建它，通过把 Math 作为对象使用就可以调用其所有属性和方法。</span><br><span class="line">    属性和方法</span><br><span class="line">        PI：圆周率</span><br><span class="line">        abs()：绝对值</span><br><span class="line">        ceil()：对数进行上舍入</span><br><span class="line">        floor()：对数进行下舍入</span><br><span class="line">        pow(x,y)：返回 x 的 y 次幂</span><br><span class="line">        random()：0-1之间的随机数</span><br><span class="line">        round()：四舍五入</span><br><span class="line">(7)RegExp</span><br><span class="line">    创建方式：   </span><br><span class="line">        var reg = new RegExp(pattern);</span><br><span class="line">        var reg = /^正则规则$/;</span><br><span class="line">    规则的写法：</span><br><span class="line">        [0-9] </span><br><span class="line">        [A-Z]</span><br><span class="line">        [a-z]</span><br><span class="line">        [A-z]</span><br><span class="line">        \d 代表数据</span><br><span class="line">        \D  非数字</span><br><span class="line">        \w  查找单词字符</span><br><span class="line">        \W  查找非单词字符</span><br><span class="line">        \s  查找空白字符</span><br><span class="line">        \S  查找非空白字符</span><br><span class="line">        n+  出现至少一次</span><br><span class="line">        n*  出现0次或多次</span><br><span class="line">        n?  出现0次或1次</span><br><span class="line">        &#123;5&#125; 出现5</span><br><span class="line">        &#123;2,8&#125; 2到8次</span><br><span class="line">    方法： </span><br><span class="line">        test(str):检索字符串中指定的值。返回 true 或 false</span><br><span class="line">    需求：</span><br><span class="line">        校验邮箱：</span><br><span class="line">        var email = haohao_827@163.com</span><br><span class="line">        var reg = /^[A-z]+[A-z0-9_-]*\@[A-z0-9]+\.[A-z]+$/;</span><br><span class="line">        reg.test(email);</span><br></pre></td></tr></table></figure><h2 id="四、js的函数"><a href="#四、js的函数" class="headerlink" title="四、js的函数"></a>四、js的函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">1、js函数定义的方式</span><br><span class="line">    (1)普通方式</span><br><span class="line">        语法：function 函数名(参数列表)&#123;函数体&#125;</span><br><span class="line">        示例：</span><br><span class="line">            function method()&#123;</span><br><span class="line">                alert(&quot;xxx&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            method();</span><br><span class="line">    (2)匿名函数</span><br><span class="line">        语法：function(参数列表)&#123;函数体&#125;</span><br><span class="line">        示例：</span><br><span class="line">            var method = function()&#123;</span><br><span class="line">                alert(&quot;yyy&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">            method();</span><br><span class="line">    (3)对象函数</span><br><span class="line">        语法：new Function(参数1,参数2,...,函数体);</span><br><span class="line">        注意：参数名称必须使用字符串形式、最后一个默认是函数体且函数体需要字符串形式</span><br><span class="line">        示例：</span><br><span class="line">            var fn = new Function(&quot;a&quot;,&quot;b&quot;,&quot;alert(a+b)&quot;);</span><br><span class="line">            fn(2,5);</span><br><span class="line">2、函数的参数</span><br><span class="line">    (1)形参没有var去修饰</span><br><span class="line">    (2)形参和实参个数不一定相等</span><br><span class="line">    (3)arguments对象 是个数组 会将传递的实参进行封装</span><br><span class="line">    function fn(a,b,c)&#123;</span><br><span class="line">        //var sum = a+b+c;</span><br><span class="line">        //alert(sum);</span><br><span class="line">        //arguments是个数组 会将传递的实参进行封装</span><br><span class="line">        for(var i=0;i&lt;arguments.length;i++)&#123;</span><br><span class="line">            alert(arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(1,2,4,8);</span><br><span class="line">    </span><br><span class="line">3、返回值</span><br><span class="line">    (1)在定义函数的时候不必表明是否具有返回值</span><br><span class="line">    (2)返回值仅仅通过return关键字就可以了 return后的代码不执行</span><br><span class="line">    function fn(a,b)&#123;</span><br><span class="line">        return a+b;</span><br><span class="line">        //alert(&quot;xxxx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(fn(2,3));</span><br><span class="line"></span><br><span class="line">4、js的全局函数</span><br><span class="line">    (1)编码和解码</span><br><span class="line">        encodeURI()   decodeURI()</span><br><span class="line">        encodeURIComponet()   decodeURIComponent()</span><br><span class="line">        escape()    unescape()</span><br><span class="line">        三者区别：</span><br><span class="line">            进行编码的符号范围不同吧，实际开发中常使用第一种</span><br><span class="line">    (2)强制转换</span><br><span class="line">        Number()</span><br><span class="line">        String()</span><br><span class="line">        Boolean()</span><br><span class="line">    (3)转成数字</span><br><span class="line">        parseInt()</span><br><span class="line">        parseFloat()</span><br><span class="line">    (4)eval()方法 </span><br><span class="line">        将字符串当作脚本进行解析运行</span><br><span class="line">        //var str = &quot;var a=2;var b=3;alert(a+b)&quot;;</span><br><span class="line">        //eval(str);</span><br><span class="line">        function print(str)&#123;</span><br><span class="line">            eval(str);</span><br><span class="line">        &#125;</span><br><span class="line">        print(&quot;自定义逻辑&quot;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、js的事件"><a href="#五、js的事件" class="headerlink" title="五、js的事件"></a>五、js的事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">事件</span><br><span class="line">事件源</span><br><span class="line">响应行为</span><br><span class="line">1、js的常用事件</span><br><span class="line">    （a）onclick:点击事件</span><br><span class="line">    （b）onchange:域内容被改变的事件</span><br><span class="line">        需求：实现二级联动</span><br><span class="line">    &lt;select id=&quot;city&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;bj&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;tj&quot;&gt;天津&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;sh&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select id=&quot;area&quot;&gt;</span><br><span class="line">        &lt;option&gt;海淀&lt;/option&gt;</span><br><span class="line">        &lt;option&gt;朝阳&lt;/option&gt;</span><br><span class="line">        &lt;option&gt;东城&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var select = document.getElementById(&quot;city&quot;);</span><br><span class="line">        select.onchange = function()&#123;</span><br><span class="line">            var optionVal = select.value;</span><br><span class="line">            switch(optionVal)&#123;</span><br><span class="line">                case &#x27;bj&#x27;:</span><br><span class="line">                    var area = document.getElementById(&quot;area&quot;);</span><br><span class="line">                    area.innerHTML = &quot;&lt;option&gt;海淀&lt;/option&gt;&lt;option&gt;东城&lt;/option&gt;&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;tj&#x27;:</span><br><span class="line">                    var area = document.getElementById(&quot;area&quot;);</span><br><span class="line">                    area.innerHTML = &quot;&lt;option&gt;南开&lt;/option&gt;&lt;option&gt;河西&lt;/option&gt;&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;sh&#x27;:</span><br><span class="line">                    var area = document.getElementById(&quot;area&quot;);</span><br><span class="line">                    area.innerHTML = &quot;&lt;option&gt;浦东&lt;/option&gt;&lt;option&gt;杨浦&lt;/option&gt;&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    alert(&quot;error&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;              </span><br><span class="line">            </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    （c）onfoucus:获得焦点的事件</span><br><span class="line">    （d）onblur:失去焦点的事件</span><br><span class="line">          需求:     当输入框获得焦点的时候，提示输入的内容格式</span><br><span class="line">                    当输入框失去焦点的时候，提示输入有误</span><br><span class="line">        &lt;label for=&quot;txt&quot;&gt;name&lt;/label&gt;</span><br><span class="line">        &lt;input id=&quot;txt&quot; type=&quot;text&quot; /&gt;&lt;span id=&quot;action&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            var txt = document.getElementById(&quot;txt&quot;);</span><br><span class="line">            txt.onfocus = function()&#123;</span><br><span class="line">                //友好提示</span><br><span class="line">                var span = document.getElementById(&quot;action&quot;);</span><br><span class="line">                span.innerHTML = &quot;用户名格式最小8位&quot;;</span><br><span class="line">                span.style.color = &quot;green&quot;;</span><br><span class="line">            &#125;;</span><br><span class="line">            txt.onblur = function()&#123;</span><br><span class="line">                //错误提示</span><br><span class="line">                var span = document.getElementById(&quot;action&quot;);</span><br><span class="line">                span.innerHTML = &quot;对不起 格式不正确&quot;;</span><br><span class="line">                span.style.color = &quot;red&quot;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">    （e）onmouseover:鼠标悬浮的事件</span><br><span class="line">    （f）onmouseout:鼠标离开的事件</span><br><span class="line">        需求：div元素 鼠标移入变为绿色 移出恢复原色</span><br><span class="line">          #d1&#123;background-color: red;width:200px;height: 200px;&#125;</span><br><span class="line">          &lt;div id=&quot;d1&quot;&gt;&lt;/div&gt;</span><br><span class="line">          &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">              var div = document.getElementById(&quot;d1&quot;);</span><br><span class="line">              div.onmouseover = function()&#123;</span><br><span class="line">                  this.style.backgroundColor = &quot;green&quot;;</span><br><span class="line">              &#125;;</span><br><span class="line">              div.onmouseout = function()&#123;</span><br><span class="line">                  this.style.backgroundColor = &quot;red&quot;;</span><br><span class="line">              &#125;;</span><br><span class="line">          &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    （g）onload:加载完毕的事件</span><br><span class="line">        等到页面加载完毕在执行onload事件所指向的函数</span><br><span class="line">        &lt;span id=&quot;span&quot;&gt;&lt;/span&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            window.onload = function()&#123;</span><br><span class="line">                var span = document.getElementById(&quot;span&quot;);</span><br><span class="line">                alert(span);</span><br><span class="line">                span.innerHTML = &quot;hello js&quot;;</span><br><span class="line">            &#125;;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">2、事件的绑定方式</span><br><span class="line">    (1)将事件和响应行为都内嵌到html标签中</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;button&quot;  onclick=&quot;alert(&#x27;xxx&#x27;)&quot;/&gt;</span><br><span class="line">    (2)将事件内嵌到html中而响应行为用函数进行封装</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;button&quot; onclick=&quot;fn()&quot; /&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            function fn()&#123;</span><br><span class="line">                alert(&quot;yyy&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    (3)将事件和响应行为 与html标签完全分离</span><br><span class="line">        &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;button&quot;/&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            var btn = document.getElementById(&quot;btn&quot;);</span><br><span class="line">            btn.onclick = function()&#123;</span><br><span class="line">                alert(&quot;zzz&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    ****this关键字</span><br><span class="line">        this经过事件的函数进行传递的是html标签对象</span><br><span class="line">        &lt;input id=&quot;btn&quot; name=&quot;mybtn&quot; type=&quot;button&quot; value=&quot;button123&quot; onclick=&quot;fn(this)&quot;/&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            function fn(obj)&#123;</span><br><span class="line">                alert(obj.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">3、阻止事件的默认行为</span><br><span class="line">    IE：window.event.returnValue = false;</span><br><span class="line">    W3c: 传递过来的事件对象.preventDefault();</span><br><span class="line">    //ie：window.event.returnValue = false;</span><br><span class="line">    //W3c：传递过来的事件对象.preventDefault();</span><br><span class="line">    //W3c标准</span><br><span class="line">    if(e&amp;&amp;e.preventDefault)&#123;</span><br><span class="line">        alert(&quot;w3c&quot;);</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    //IE标签</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        alert(&quot;ie&quot;);</span><br><span class="line">        window.event.returnValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    //通过事件返回false也可以阻止事件的默认行为</span><br><span class="line">    &lt;a href=&quot;demo11.html&quot; onclick=&quot;return false&quot;&gt;点击我吧&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">4、阻止事件的传播</span><br><span class="line">    IE：window.event.cancelBubble = true;</span><br><span class="line">    W3c: 传递过来的事件对象.stopPropagation();</span><br><span class="line">    if(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">        alert(&quot;w3c&quot;);</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    //IE标签</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        alert(&quot;ie&quot;);</span><br><span class="line">        window.event.cancelBubble = true;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、js的bom"><a href="#六、js的bom" class="headerlink" title="六、js的bom"></a>六、js的bom</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">(1)window对象</span><br><span class="line">    弹框的方法：</span><br><span class="line">        提示框：alert(&quot;提示信息&quot;);</span><br><span class="line">        确认框：confirm(&quot;确认信息&quot;);</span><br><span class="line">            有返回值：如果点击确认返回true  如果点击取消 返回false</span><br><span class="line">            var res = confirm(&quot;您确认要删除吗？&quot;);</span><br><span class="line">            alert(res);</span><br><span class="line">        输入框：prompt(&quot;提示信息&quot;);</span><br><span class="line">            有返回值：如果点击确认返回输入框的文本 点击取消返回null</span><br><span class="line">            var res =  prompt(&quot;请输入密码？&quot;);</span><br><span class="line">            alert(res);</span><br><span class="line">    open方法：</span><br><span class="line">        window.open(&quot;url地址&quot;);           </span><br><span class="line">        open(&quot;../jsCore/demo10.html&quot;);</span><br><span class="line">        </span><br><span class="line">    定时器：</span><br><span class="line">    setTimeout(函数,毫秒值);</span><br><span class="line">        setTimeout(</span><br><span class="line">            function()&#123;</span><br><span class="line">                alert(&quot;xx&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            3000</span><br><span class="line">        );</span><br><span class="line">    clearTimeout(定时器的名称);</span><br><span class="line">        var timer;</span><br><span class="line">        var fn = function()&#123;</span><br><span class="line">            alert(&quot;x&quot;);</span><br><span class="line">            timer = setTimeout(fn,2000);</span><br><span class="line">        &#125;;</span><br><span class="line">        var closer = function()&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;;</span><br><span class="line">        fn();</span><br><span class="line">    setInterval(函数,毫秒值);</span><br><span class="line">    clearInterval(定时器的名称)</span><br><span class="line">        var timer = setInterval(</span><br><span class="line">        function()&#123;</span><br><span class="line">            alert(&quot;nihao&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        2000</span><br><span class="line">      );</span><br><span class="line">      var closer = function()&#123;</span><br><span class="line">          clearInterval(timer);</span><br><span class="line">      &#125;;</span><br><span class="line">        </span><br><span class="line">    需求：注册后5秒钟跳转首页</span><br><span class="line">    恭喜您注册成功，&lt;span id=&quot;second&quot; style=&quot;color: red;&quot;&gt;5&lt;/span&gt;秒后跳转到首页，如果不跳转请&lt;a href=&quot;../jsCore/demo10.html&quot;&gt;点击这里&lt;/a&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var time = 5;</span><br><span class="line">        var timer;</span><br><span class="line">        timer = setInterval(</span><br><span class="line">            function()&#123;</span><br><span class="line">                var second = document.getElementById(&quot;second&quot;);</span><br><span class="line">                if(time&gt;=1)&#123;</span><br><span class="line">                    second.innerHTML = time;</span><br><span class="line">                    time--;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    clearInterval(timer);</span><br><span class="line">                    location.href=&quot;../jsCore/demo10.html&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            1000</span><br><span class="line">        );</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">(2)location </span><br><span class="line">    location.href=&quot;url地址&quot;;</span><br><span class="line">(3)history</span><br><span class="line">    back();</span><br><span class="line">    forward();</span><br><span class="line">    go();</span><br><span class="line">    &lt;a href=&quot;demo7.html&quot;&gt;后一页&lt;/a&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;上一页&quot; onclick=&quot;history.back()&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;下一页&quot; onclick=&quot;history.forward()&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;上一页&quot; onclick=&quot;history.go(-1)&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;下一页&quot; onclick=&quot;history.go(1)&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、js的dom"><a href="#七、js的dom" class="headerlink" title="七、js的dom"></a>七、js的dom</h2><pre><code>  DOM（文档对象模型）是 HTML 和 XML 的应用程序接口（API）。  DOM 将把整个页面规划成由节点层级构成的文档。  HTML 或 XML 页面的每个部分都是一个节点的衍生物。</code></pre><p><img src="https://img-service.csdnimg.cn/img_convert/a75ac32ec76004203776a793a66d9f4d.png" alt="img"></p><p><img src="https://img-service.csdnimg.cn/img_convert/f0ef068840b611891683da0d7756e282.png" alt="img"></p><p>1、文档对象模型<br>    html文件加载到内存之后会形成一颗dom树，根据这些节点对象可以进行脚本代码的动态修改在dom树当中,一切皆为节点对象.</p><p><img src="https://img-service.csdnimg.cn/img_convert/802a89e8e8cf48b0aa468b701f8f4455.png" alt="img"></p><p>2、XML DOM与HTML DOM的关系<br>    XML DOM 定义了访问和处理 XML 文档的标准方法<br>    HTML文档格式 符合XML语法标准，所以可以使用XML DOM API<br>    在XML DOM每个元素 都会被解析为一个节点Node，而常用的节点类型又分为<br>    元素节点  Element<br>    属性节点  Attr<br>    文本节点  Text<br>    文档节点  Document<br>    HTML DOM 定义了针对 HTML文档的对象，可以说是一套 更加适用于 JavaScript 技术开发 的API<br>    HTML DOM是对XML DOM的扩展<br>    进行 JavaScript DOM开发 可以同时使用 XML DOM和 HTML DOM</p><p>3、dom方法和属性<br>    （1）getElementById() 方法：getElementById() 方法返回带有指定 ID 的元素<br>         <body><br>            <form name="form1" action="test.html" method="post" ><br>                <input type="text" name="username" value="你好"  id="tid"  onchange="" ><br>                <input type="button" name="ok" value="保存1"/><br>            </form><br>        </body></p><pre><code>    &lt;script type=&quot;text/javascript&quot;&gt;                 var inputNode = document.getElementById(&quot;tid&quot;);        //alert(inputNode.value);        var inputNode = document.getElementById(&quot;tid&quot;);        alert(inputNode.type);    &lt;/script&gt;（2）getElementsByTagName() 方法：getElementsByTagName() 返回带有指定标签名的所有元素。     &lt;body&gt;           &lt;form name=&quot;form1&quot; action=&quot;test.html&quot; method=&quot;post&quot; &gt;                 &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_1&quot;  id=&quot;tid_1&quot;  &gt;&lt;br&gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_2&quot;  id=&quot;tid_2&quot;  &gt;&lt;br&gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_3&quot;  id=&quot;tid_3&quot;  &gt;&lt;br&gt;             &lt;input type=&quot;button&quot; name=&quot;ok&quot; value=&quot;保存1&quot;/&gt;           &lt;/form&gt;               &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;输出select被选中的值&quot; /&gt;      &lt;/body&gt;                &lt;script type=&quot;text/javascript&quot;&gt;                //获取所有的input元素,返回值是数组            var inputNodes = document.getElementsByTagName(&quot;input&quot;);            //测试长度            //alert(inputNodes.length);            //遍历value的值             for(var i=0;i&lt;inputNodes.length;i++)&#123;                var inputNode = inputNodes[i];                alert(inputNode.value);           &#125;        &lt;/script&gt;                      （3）getElementsByName() 方法：getElementByName() 返回带有指定name的所有元素。     &lt;body&gt;        &lt;form name=&quot;form1&quot; action=&quot;test.html&quot; method=&quot;post&quot; &gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_1&quot;  id=&quot;tid_1&quot;  &gt;&lt;br&gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_2&quot;  id=&quot;tid_2&quot;  &gt;&lt;br&gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;IT_3&quot;  id=&quot;tid_3&quot;  &gt;&lt;br&gt;             &lt;input type=&quot;button&quot; name=&quot;ok&quot; value=&quot;保存1&quot;/&gt;        &lt;/form&gt;     &lt;/body&gt;     &lt;script type=&quot;text/javascript&quot;&gt;          //通过元素的name属性获取所有元素的引用        var inputNodes = document.getElementsByName(&quot;tname&quot;);         //测试该数据的长度        //alert(inputNodes.length);         //遍历元素,输出所有value属性的值         for(var i=0;i&lt;inputNodes.length;i++)&#123;            var inputNode = inputNodes[i];            alert(inputNode.value);          &#125;         //为每个文本框(&lt;input type=&quot;text&quot;&gt;)增加chanage事件,当值改变时,输出改变的值         for(var i=0;i&lt;inputNodes.length;i++)&#123;            var inputNode = inputNodes[i];            inputNode.onchange = function()&#123;            alert(this.value);            &#125;;         &#125;        &lt;/script&gt;（4）innerHTML属性：获取元素内容的最简单方法是使用 innerHTML 属性          innerHTML 属性对于获取或替换 HTML 元素的内容很有用。    &lt;body&gt;          &lt;div id=&quot;subject&quot;&gt;jquery&lt;/div&gt;    &lt;/body&gt;    &lt;script language=&quot;JavaScript&quot;&gt;                      //使用innerHTML读出id=subject中的文本内容        var div = document.getElementById(&quot;subject&quot;);        alert(div.innerHTML);                     //将&lt;h1&gt;今天&lt;/h1&gt;写到div的层中        var div2 = document.getElementById(&quot;subject&quot;);        div2.innerHTML = &quot;&lt;h1&gt;今天&lt;/h1&gt;&quot;;                             //innerText的使用                   &lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/10/hello-world/"/>
      <url>/2022/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
